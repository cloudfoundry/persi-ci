---
#  This pipeline is set automatically, any non-committed changes will be lost.
#
# To set the pipeline, run:
#    fly -t cryo-runway set-pipeline -p nfs-volume-release -c nfs-volume-release.yml
#
#! ************************************
#! Secrets we need to run this pipeline
#! ************************************
#! this needs to come first, else all other vars can't be resolved.
#! cerberus creds are required to access the teams vault instance managed by cerberus. The creds have been created manually via the vault-cli targetting the teams cerberus vault. Example steps to create an approle are here: https://developer.hashicorp.com/vault/docs/auth/approle the required value for policies is `restricted-admin` the auth method is mounted on the standard path.
cerberus: &cerberus
  role_id: ((cerberus-auth.role_id))
  secret_id: ((cerberus-auth.secret_id))
cerberus_url: &cerberus_url ((cerberus-auth.url))

aws_nfsvolume_uploader_role_arn: &aws_nfsvolume_uploader_role_arn ((cerberus:aws/nfsvolume-uploader.role_arn))
    #! aws_nfsvolume_uploader_role_arn was needed on 2023-10-05 for defining the AWS role assumed when accessing the S3 bucket that (1) stores the version file used to keep track of the next version; (2) serves as BOSH blobstore for this release. The token was given to us by the Volume Services team. It lives in Runway's Vault under the path: 'runway_concourse/cryogenics'.

aws_nfsvolume_uploader_role_id: &aws_nfsvolume_uploader_role_id ((cerberus:aws/nfsvolume-uploader.role_id))
    #! aws_nfsvolume_uploader_role_id was needed on 2023-10-05 for defining the AWS Access Key for accessing the S3 bucket that (1) stores the version file used to keep track of the next version; (2) serves as BOSH blobstore for this release. The token was given to us by the Volume Services team. It lives in Runway's Vault under the path: 'runway_concourse/cryogenics'.

aws_nfsvolume_uploader_role_secret: &aws_nfsvolume_uploader_role_secret ((cerberus:aws/nfsvolume-uploader.role_secret))
    #! aws_nfsvolume_uploader_role_secret was needed on 2023-10-05 for defining the AWS Access Secret for accessing the S3 bucket that (1) stores the version file used to keep track of the next version; (2) serves as BOSH blobstore for this release. The token was given to us by the Volume Services team. It lives in Runway's Vault under the path: 'runway_concourse/cryogenics'.

github_access_token: &github_access_token ((cerberus:github.access_token))
    #! github_access_token was needed on 2023-10-05 for accessing the Github API in order to consume PRs, create and download releases. Genearted using Github account and lives in Lastpass.

github_email: &github_email ((cerberus:github.email))
    #! github_email was needed on 2023-10-05 for Git commits when creating a new release. It lives in Runway's Vault.

github_ssh_key: &github_ssh_key ((cerberus:github.ssh_key))
    #! github_ssh_key was needed on 2023-10-05 by the git-resource to access various Git repos via SSH. Genearted using Github account and lives in Runway's Vault.

github_user: &github_user ((cerberus:github.user))
    #! github_user was needed on 2023-10-05 for Git commits when creating a new release. It lives in Runway's Vault as well as in Lastpass.

slack_webhook: &slack_webhook ((cerberus:slack.webhook))
    #! slack_webhook was needed on 2023-10-05 for sending notifications in our Slack channel. It lives in Runway's Vault.

shepherd_account_key: &shepherd_account_key ((cerberus:shepherd.sa_key))
  #! shepherd_account_key was needed on 2023-09-28 to claim shepherd environments. It was created using `shepherd create service-account` after logging in with WS1.


#! **************
#! End of secrets
#! **************

number_of_retries: &number_of_retries 2
var_sources:
- name: cerberus
  type: vault
  config:
    auth_backend: approle
    auth_params: *cerberus
    url: *cerberus_url
    path_prefix: secret

groups:
- name: test
  jobs:
  - nfs-volume-release-job-tests
  - mapfs-release-job-tests
  - claim-ldap-env
  - deploy-cf-with-ldap
  - pats-nfs-ldap
  - unclaim-ldap-env
  - claim-env
  - deploy-cf
  - pats
  - cats-nfs
  - drats
  - unclaim-env
  - merge-pr
  - check-for-cves
- name: bump
  jobs:
  - bump-nfs-utils
  - bump-sqlite
  - bump-libevent
  - bump-golang
  - bump-openldap
  - bump-openssl
  - update-go-directive-for-nfsv3driver
  - update-go-directive-for-nfsbroker
  - update-go-directive-for-volumedriver
  - update-go-directive-for-volume-mount-options
  - update-go-directive-for-existingvolumebroker
  - update-go-directive-for-service-broker-store
- name: release
  jobs:
  - check-for-changes
  - shipit-nfs
  - manual-bump-nfs-major
  - manual-bump-nfs-patch
  - manual-bump-nfs-minor

resources:
- name: openssl
  type: github-release
  source:
    owner: openssl
    repository: openssl
    tag_filter: ^openssl-?([0-9]+\.[0-9]+\.[0-9]+)$
    access_token: *github_access_token
- name: git-concourse-cve-scan
  type: git
  source:
    uri: git@github.com:pivotal/concourse-cve-scan.git
    branch: feat/add-vex-consideration
    private_key: *github_ssh_key

- name: image-cryo-essentials
  type: registry-image
  source:
    registry_mirror:
      host: harbor-repo.vmware.com
    repository: cryogenics/essentials

- name: git-tas-vex
  type: git
  source:
    uri: git@github.com:pivotal/tas-vex.git
    private_key: *github_ssh_key

- name: github-release-tas-cve
  type: github-release
  source:
    access_token: *github_access_token
    repository: tas-cve
    user: pivotal

- name: slack-cryo-notification
  type: slack-notification
  icon: bell-ring
  source:
    url: *slack_webhook

- name: every-week
  type: time
  source:
    interval: 168h # 24h*7days

- name: python-394
  type: docker-image
  icon: docker
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/library/python
    tag: 3.9.4

- name: image-backup-and-restore
  type: docker-image
  icon: docker
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/pcfplatformrecovery/backup-and-restore

- name: cryogenics-concourse-tasks
  type: git
  icon: github
  source:
    uri: git@github.com:pivotal/cryogenics-concourse-tasks.git
    private_key: *github_ssh_key

- name: openldap-version
  type: uscan
  source:
    watchfile: |
      version=4
      https://www.openldap.org/software/download/OpenLDAP/openldap-release/ openldap-(2.[\d\.]+)\.tgz

- name: nfs-utils-version
  type: uscan
  source:
    watchfile: |
      version=4
      https://www.kernel.org/pub/linux/utils/nfs-utils/([\d\.]+)/nfs-utils-([\d\.]+).tar.xz

- name: sqlite-release
  type: git
  source:
    uri: git@github.com:sqlite/sqlite.git
    tag_filter: version-*
    private_key: *github_ssh_key

- name: libevent-release
  type: github-release
  source:
    owner: libevent
    repository: libevent
    tag_filter: release-([\d\.]+\d+)-stable
    access_token: *github_access_token

- name: env-tas-jammy
  icon: pool
  type: shepherd
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd_account_key
    compatibility-mode: environments-app
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: tas-5_0

- name: env
  icon: pool
  type: shepherd
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd_account_key
    compatibility-mode: environments-app
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: cfd

- name: persi-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry/persi-ci
    branch: master

- name: nfs-volume-release
  type: pull-request
  source:
    base_branch: master
    access_token: *github_access_token
    repository: cloudfoundry/nfs-volume-release
    disable_forks: true
    autosync_pr: true

- name: nfs-volume-release-bump
  type: git
  source:
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git

# Resource used to track production changes in the release job so that we don't
# trigger a release with only changes (CI, tests, etc.) that are not relevant to
# customers.
- name: nfs-volume-release-production-files-only
  type: git
  source:
    branch: master
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git
    paths:
    - .final_builds
    - LICENSE
    - NOTICE
    - config
    - jobs
    - packages
    - releases
    - src

- name: nfs-volume-release-master
  type: git
  source:
    branch: master
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git

- name: nfs-volume-release-nfs-utils-bump
  type: git
  source:
    branch: master
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git

- name: nfs-volume-release-sqlite-bump
  type: git
  source:
    branch: master
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git

- name: nfs-volume-release-libevent-bump
  type: git
  source:
    branch: master
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git

- name: nfsvolume-version
  type: semver
  source:
    access_key_id: *aws_nfsvolume_uploader_role_id
    bucket: nfsvolume-release-versions
    initial_version: 7.0.2
    key: current-version
    region_name: us-east-1
    secret_access_key: *aws_nfsvolume_uploader_role_secret
    assume_role_arn: *aws_nfsvolume_uploader_role_arn

- name: github-release-nfs
  type: github-release
  source:
    user: cloudfoundry
    repository: nfs-volume-release
    drafts: true
    access_token: *github_access_token

- name: mapfs-release
  type: git
  source:
    branch: master
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/mapfs-release.git
    ignore_paths:
    - scripts

- name: mapfs-release-concourse-tasks
  type: git
  source:
    branch: master
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/mapfs-release.git

- name: cf-deployment
  type: git
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-deployment.git

- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: cf-volume-services-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-volume-services-acceptance-tests.git

- name: cf-acceptance-tests
  type: git
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-acceptance-tests.git

- name: bbr-binary-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: bosh-backup-and-restore
    access_token: *github_access_token

- name: disaster-recovery-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/disaster-recovery-acceptance-tests.git

- name: golang-release
  type: git
  icon: tag
  source:
    uri: https://github.com/bosh-packages/golang-release.git
    tag_filter: v*

- icon: github
  name: nfs-volume-release-bump-golang
  source:
    branch: master
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git
  type: git

- name: nfsv3driver
  type: git
  source:
    uri: git@github.com:cloudfoundry/nfsv3driver.git
    branch: master
    private_key: *github_ssh_key

- name: nfsbroker
  type: git
  source:
    uri: git@github.com:cloudfoundry/nfsbroker.git
    branch: master
    private_key: *github_ssh_key

- name: service-broker-store
  type: git
  source:
    uri: git@github.com:cloudfoundry/service-broker-store.git
    branch: master
    private_key: *github_ssh_key

- name: existingvolumebroker
  type: git
  source:
    uri: git@github.com:cloudfoundry/existingvolumebroker.git
    branch: master
    private_key: *github_ssh_key

- name: volume-mount-options
  type: git
  source:
    uri: git@github.com:cloudfoundry/volume-mount-options.git
    branch: master
    private_key: *github_ssh_key

- name: volumedriver
  type: git
  source:
    uri: git@github.com:cloudfoundry/volumedriver.git
    branch: master
    private_key: *github_ssh_key

resource_types:
- name: semver
  source:
    registry_mirror:
      host: harbor-repo.vmware.com
    repository: concourse/semver-resource
  type: registry-image

- name: slack-notification
  type: registry-image
  source:
    registry_mirror:
      host: harbor-repo.vmware.com
    repository: dockerhub-proxy-cache/cfcommunity/slack-notification-resource

- name: uscan
  source:
    registry_mirror:
      host: harbor-repo.vmware.com
    repository: cryogenics/concourse-uscan-resource
  type: registry-image

- name: git
  type: registry-image
  source:
    repository: concourse/git-resource
    tag: ubuntu

- name: shepherd
  source:
    tag: v1
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
  type: registry-image

- name: pull-request
  type: registry-image
  source:
    registry_mirror:
      host: harbor-repo.vmware.com
    repository: dockerhub-proxy-cache/cryogenics/pr-queue-resource

jobs:
- name: check-for-cves
  plan:
    - in_parallel:
        - get: git-concourse-cve-scan
        - get: github-release-tas-cve
        - get: nfs-volume-release
          trigger: true
        - get: git-tas-vex
    - task: run-scan
      file: git-concourse-cve-scan/tasks/scan/scan.yml
      input_mapping:
        concourse-cve-scan: git-concourse-cve-scan
        tas-cve: github-release-tas-cve
        target-bosh-release: nfs-volume-release
        tas-vex: git-tas-vex
      params:
        DRY_RUN: true
        GRYPE_FAILURE_LEVEL: negligible #! Can be any of: none | negligible | low | medium | high | critical
        RELEASE_NAME: nfs-volume
        RELEASE_VERSION: pre-release-cve-scan

- name: bump-nfs-utils
  plan:
  - in_parallel:
    - get: nfs-utils-version
      trigger: true
    - get: image-cryo-essentials
    - get: cryogenics-concourse-tasks
    - get: nfs-volume-release-nfs-utils-bump
  - load_var: nfs-utils
    file: nfs-utils-version/version
    format: json
  - task: download-nfs-utils
    image: image-cryo-essentials
    config:
      platform: linux
      params:
        NEW_VERSION: ((.:nfs-utils.version.ref))
      run:
        path: /bin/sh
        args:
        - -c
        - |
            wget -O "nfs-debs-nfs-utils/nfs-utils-${NEW_VERSION}.tar.xz" "https://www.kernel.org/pub/linux/utils/nfs-utils/${NEW_VERSION}/nfs-utils-${NEW_VERSION}.tar.xz"
            echo ${NEW_VERSION} > nfs-debs-nfs-utils/version
      outputs:
      - name: nfs-debs-nfs-utils
  - task: bump-nfs-utils
    file: cryogenics-concourse-tasks/deps-automation/bump-blob/task.yml
    input_mapping:
      distributed-package: nfs-debs-nfs-utils
      bosh-release: nfs-volume-release-nfs-utils-bump
    output_mapping:
      bosh-release-updated: nfs-volume-release-nfs-utils-bump
    params:
      AWS_ACCESS_KEY_ID: *aws_nfsvolume_uploader_role_id
      AWS_SECRET_ACCESS_KEY: *aws_nfsvolume_uploader_role_secret
      AWS_ROLE_ARN: *aws_nfsvolume_uploader_role_arn
      GIT_USERNAME: *github_user
      GIT_EMAIL: *github_email
      GIT_BRANCH: &nfs-utils-bump-branch bump-nfs-utils-to-v((.:nfs-utils.version.ref))
      BLOB_NAME: nfs-utils
      BLOB_EXTENSION: .tar.xz
      BLOB_DIRECTORY: nfs-debs/
  - put: nfs-volume-release-nfs-utils-bump
    params:
      repository: nfs-volume-release-nfs-utils-bump
      force: true
      branch: *nfs-utils-bump-branch
    on_success:
      task: create-pull-request
      image: image-cryo-essentials
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      input_mapping:
        source-repo: nfs-volume-release-nfs-utils-bump
      params:
        GITHUB_TOKEN: *github_access_token
        BASE: master
        BRANCH: *nfs-utils-bump-branch
        TITLE: "Bump NFS-Utils to v((.:nfs-utils.version.ref))"
        LABELS: dependencies

- name: bump-sqlite
  plan:
  - in_parallel:
    - get: sqlite-release
      trigger: true
    - get: image-cryo-essentials
    - get: cryogenics-concourse-tasks
    - get: nfs-volume-release-sqlite-bump
  - load_var: sqlite-version
    file: sqlite-release/VERSION
    format: trim
  - task: create-tarball
    image: image-cryo-essentials
    config:
      platform: linux
      params:
        NEW_VERSION: ((.:sqlite-version))
      inputs:
        - name: sqlite-release
      run:
        path: /bin/sh
        args:
        - -c
        - |
            set -x
            mkdir -p nfs-debs-sqlite
            cp -r sqlite-release/ sqlite-version-${NEW_VERSION}
            tar -zcvf nfs-debs-sqlite/sqlite-${NEW_VERSION}.tar.gz --exclude=.git sqlite-version-${NEW_VERSION}
            echo ${NEW_VERSION} > nfs-debs-sqlite/version
      outputs:
      - name: nfs-debs-sqlite
  - task: bump-sqlite
    file: cryogenics-concourse-tasks/deps-automation/bump-blob/task.yml
    input_mapping:
      distributed-package: nfs-debs-sqlite
      bosh-release: nfs-volume-release-sqlite-bump
    output_mapping:
      bosh-release-updated: nfs-volume-release-sqlite-bump
    params:
      AWS_ACCESS_KEY_ID: *aws_nfsvolume_uploader_role_id
      AWS_SECRET_ACCESS_KEY: *aws_nfsvolume_uploader_role_secret
      AWS_ROLE_ARN: *aws_nfsvolume_uploader_role_arn
      GIT_USERNAME: *github_user
      GIT_EMAIL: *github_email
      GIT_BRANCH: &sqlite-bump-branch bump-sqlite-to-v((.:sqlite-version))
      BLOB_NAME: sqlite
      BLOB_EXTENSION: .tar.gz
      BLOB_DIRECTORY: nfs-debs/
  - put: nfs-volume-release-sqlite-bump
    params:
      repository: nfs-volume-release-sqlite-bump
      force: true
      branch: *sqlite-bump-branch
    on_success:
      task: create-pull-request
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      input_mapping:
        source-repo: nfs-volume-release-sqlite-bump
      params:
        GITHUB_TOKEN: *github_access_token
        BASE: master
        BRANCH: *sqlite-bump-branch
        TITLE: "Bump SQLite to v((.:sqlite-version))"
        LABELS: dependencies

- name: bump-libevent
  plan:
    - in_parallel:
      - get: libevent-release
        trigger: true
      - get: cryogenics-concourse-tasks
      - get: nfs-volume-release-libevent-bump
    - load_var: libevent-version
      file: libevent-release/version
    - task: bump
      file: cryogenics-concourse-tasks/deps-automation/bump-blob/task.yml
      input_mapping:
        distributed-package: libevent-release
        bosh-release: nfs-volume-release-libevent-bump
      output_mapping:
        bosh-release-updated: nfs-volume-release-libevent-bump
      params:
        AWS_ACCESS_KEY_ID: *aws_nfsvolume_uploader_role_id
        AWS_SECRET_ACCESS_KEY: *aws_nfsvolume_uploader_role_secret
        AWS_ROLE_ARN: *aws_nfsvolume_uploader_role_arn
        GIT_USERNAME: *github_user
        GIT_EMAIL: *github_email
        GIT_BRANCH: &libevent-bump-branch bump-libevent-to-v((.:libevent-version))
        BLOB_NAME: libevent
        BLOB_EXTENSION: -stable.tar.gz
        BLOB_DIRECTORY: nfs-debs/
    - put: nfs-volume-release-libevent-bump
      params:
        repository: nfs-volume-release-libevent-bump
        force: true
        branch: *libevent-bump-branch
      on_success:
        task: create-pull-request
        file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
        input_mapping:
          source-repo: nfs-volume-release-libevent-bump
        params:
          GITHUB_TOKEN: *github_access_token
          BASE: master
          BRANCH: *libevent-bump-branch
          TITLE: "Bump Libevent to v((.:libevent-version))"
          LABELS: dependencies

- name: bump-golang
  plan:
  - in_parallel:
    - get: golang-release
      trigger: true
    - get: cryogenics-concourse-tasks
    - get: nfs-volume-release-bump-golang
      params:
        branch: master
    - get: image-cryo-essentials
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - task: bump-golang
    image: image-cryo-essentials
    file: cryogenics-concourse-tasks/deps-automation/bump-golang/task.yml
    input_mapping:
      release: nfs-volume-release-bump-golang
      vendored-package-release: golang-release
    params:
      VENDORED_PACKAGE_NAME: golang-1-linux
      VENDOR_UPDATES_BRANCH: &golang-vendor-branch bump-golang-vendor-((.:golang-release-version))
      COMMIT_USERNAME: bump-golang CI job
      COMMIT_USEREMAIL: *github_email
      AWS_ACCESS_KEY_ID: *aws_nfsvolume_uploader_role_id
      AWS_SECRET_ACCESS_KEY: *aws_nfsvolume_uploader_role_secret
      AWS_ASSUME_ROLE_ARN: *aws_nfsvolume_uploader_role_arn
  - put: nfs-volume-release-bump-golang
    params:
      repository: release-with-updated-vendored-package
      branch: *golang-vendor-branch
  - try:
      # We've seen cases where there are 2 or more new releases of
      # golang-release which causes this job to trigger 2x or more. A PR will
      # be created on the 1st build. On the following ones, it is possible
      # that this task will fail as there exist already a PR (which is
      # probably flowing through the pipeline). To prevent this scenario
      # we're making this step best-effort.
      # This also makes the job idempotent. If we retrigger the job but if
      # there are no new version of golang-release, this step will fail
      # saying "Your branch is up-to-date with
      # 'origin/golang-vendor-update'."
      task: create-golang-vendor-pull-request
      image: image-cryo-essentials
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      params: &golang-bump-pr-params
        BASE: master
        BRANCH: *golang-vendor-branch
        LABELS: dependencies
        TITLE: Update vendored package golang-1-linux
        MESSAGE: "This is an automatically generated Pull Request from the Cryogenics CI Bot.\
          \nI have detected a new version of [golang-release](https://github.com/bosh-packages/golang-release) and \
          automatically bumped\nthis package to benefit from the latest changes.\
          \nIf this does not look right, please reach out to the \
          [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU) team.\n"
      input_mapping:
        source-repo: nfs-volume-release-bump-golang

- name: update-go-directive-for-nfsv3driver
  plan:
  - in_parallel:
    - get: golang-release
      trigger: true
      passed:
      - bump-golang
    - get: cryogenics-concourse-tasks
      passed:
      - bump-golang
    - get: nfsv3driver
    - get: image-cryo-essentials
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - task: update-go-directive
    image: image-cryo-essentials
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: nfsv3driver
    output_mapping:
      golang-project-repo: nfsv3driver
  - put: nfsv3driver
    params:
      repository: nfsv3driver
      branch: *golang-vendor-branch
      force: true
  - try:
      # We've seen cases where there are 2 or more new releases of
      # golang-release which causes this job to trigger 2x or more. A PR will
      # be created on the 1st build. On the following ones, it is possible
      # that this task will fail as there exist already a PR (which is
      # probably flowing through the pipeline). To prevent this scenario
      # we're making this step best-effort.
      # This also makes the job idempotent. If we re-trigger the job but if
      # there are no new version of golang-release, this step will fail
      # saying "Your branch is up-to-date with
      # 'origin/golang-vendor-update'."
      task: create-gomod-directive-update-pull-request
      image: image-cryo-essentials
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      params:
        <<: *golang-bump-pr-params
      input_mapping:
        source-repo: nfsv3driver

- name: update-go-directive-for-nfsbroker
  plan:
  - in_parallel:
    - get: golang-release
      trigger: true
      passed:
      - bump-golang
    - get: cryogenics-concourse-tasks
      passed:
      - bump-golang
    - get: nfsbroker
    - get: image-cryo-essentials
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - task: update-go-directive
    image: image-cryo-essentials
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: nfsbroker
    output_mapping:
      golang-project-repo: nfsbroker
  - put: nfsbroker
    params:
      force: true
      repository: nfsbroker
      branch: *golang-vendor-branch
  - task: create-gomod-directive-update-pull-request
    image: image-cryo-essentials
    file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
    params:
      <<: *golang-bump-pr-params
    input_mapping:
      source-repo: nfsbroker

- name: update-go-directive-for-volumedriver
  plan:
  - in_parallel:
    - get: golang-release
      trigger: true
      passed:
      - bump-golang
    - get: cryogenics-concourse-tasks
      passed:
      - bump-golang
    - get: volumedriver
    - get: image-cryo-essentials
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - task: update-go-directive
    image: image-cryo-essentials
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: volumedriver
    output_mapping:
      golang-project-repo: volumedriver
  - put: volumedriver
    params:
      force: true
      repository: volumedriver
      branch: *golang-vendor-branch
  - try:
      # We've seen cases where there are 2 or more new releases of
      # golang-release which causes this job to trigger 2x or more. A PR will
      # be created on the 1st build. On the following ones, it is possible
      # that this task will fail as there exist already a PR (which is
      # probably flowing through the pipeline). To prevent this scenario
      # we're making this step best-effort.
      # This also makes the job idempotent. If we re-trigger the job but if
      # there are no new version of golang-release, this step will fail
      # saying "Your branch is up-to-date with
      # 'origin/golang-vendor-update'."
      task: create-gomod-directive-update-pull-request
      image: image-cryo-essentials
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      params:
        <<: *golang-bump-pr-params
      input_mapping:
        source-repo: volumedriver

- name: update-go-directive-for-volume-mount-options
  plan:
  - in_parallel:
    - get: golang-release
      trigger: true
      passed:
      - bump-golang
    - get: cryogenics-concourse-tasks
      passed:
      - bump-golang
    - get: volume-mount-options
    - get: image-cryo-essentials
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - task: update-go-directive
    image: image-cryo-essentials
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: volume-mount-options
    output_mapping:
      golang-project-repo: volume-mount-options
  - put: volume-mount-options
    params:
      force: true
      repository: volume-mount-options
      branch: *golang-vendor-branch
  - try:
      # We've seen cases where there are 2 or more new releases of
      # golang-release which causes this job to trigger 2x or more. A PR will
      # be created on the 1st build. On the following ones, it is possible
      # that this task will fail as there exist already a PR (which is
      # probably flowing through the pipeline). To prevent this scenario
      # we're making this step best-effort.
      # This also makes the job idempotent. If we re-trigger the job but if
      # there are no new version of golang-release, this step will fail
      # saying "Your branch is up-to-date with
      # 'origin/golang-vendor-update'."
      task: create-gomod-directive-update-pull-request
      image: image-cryo-essentials
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      params:
        <<: *golang-bump-pr-params
      input_mapping:
        source-repo: volume-mount-options

- name: update-go-directive-for-existingvolumebroker
  plan:
  - in_parallel:
    - get: golang-release
      trigger: true
      passed:
      - bump-golang
    - get: cryogenics-concourse-tasks
      passed:
      - bump-golang
    - get: existingvolumebroker
    - get: image-cryo-essentials
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - task: update-go-directive
    image: image-cryo-essentials
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: existingvolumebroker
    output_mapping:
      golang-project-repo: existingvolumebroker
  - put: existingvolumebroker
    params:
      force: true
      repository: existingvolumebroker
      branch: *golang-vendor-branch
  - try:
      # We've seen cases where there are 2 or more new releases of
      # golang-release which causes this job to trigger 2x or more. A PR will
      # be created on the 1st build. On the following ones, it is possible
      # that this task will fail as there exist already a PR (which is
      # probably flowing through the pipeline). To prevent this scenario
      # we're making this step best-effort.
      # This also makes the job idempotent. If we re-trigger the job but if
      # there are no new version of golang-release, this step will fail
      # saying "Your branch is up-to-date with
      # 'origin/golang-vendor-update'."
      task: create-gomod-directive-update-pull-request
      image: image-cryo-essentials
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      params:
        <<: *golang-bump-pr-params
      input_mapping:
        source-repo: existingvolumebroker

- name: update-go-directive-for-service-broker-store
  plan:
  - in_parallel:
    - get: golang-release
      trigger: true
      passed:
      - bump-golang
    - get: cryogenics-concourse-tasks
      passed:
      - bump-golang
    - get: service-broker-store
    - get: image-cryo-essentials
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - task: update-go-directive
    image: image-cryo-essentials
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: service-broker-store
    output_mapping:
      golang-project-repo: service-broker-store
  - put: service-broker-store
    params:
      repository: service-broker-store
      branch: *golang-vendor-branch
      force: true
  - try:
      # We've seen cases where there are 2 or more new releases of
      # golang-release which causes this job to trigger 2x or more. A PR will
      # be created on the 1st build. On the following ones, it is possible
      # that this task will fail as there exist already a PR (which is
      # probably flowing through the pipeline). To prevent this scenario
      # we're making this step best-effort.
      # This also makes the job idempotent. If we re-trigger the job but if
      # there are no new version of golang-release, this step will fail
      # saying "Your branch is up-to-date with
      # 'origin/golang-vendor-update'."
      task: create-gomod-directive-update-pull-request
      image: image-cryo-essentials
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      params:
        <<: *golang-bump-pr-params
      input_mapping:
        source-repo: service-broker-store

- name: bump-openssl
  plan:
  - in_parallel:
    - get: openssl
      trigger: true
    - get: nfs-volume-release-master
    - get: cryogenics-concourse-tasks
  - load_var: new-version
    file: openssl/version
  - task: bump-openssl
    file: cryogenics-concourse-tasks/deps-automation/bump-blob/task.yml
    input_mapping:
      distributed-package: openssl
      bosh-release: nfs-volume-release-master
    output_mapping:
      bosh-release-updated: nfs-volume-release-master
    params:
      AWS_ACCESS_KEY_ID: *aws_nfsvolume_uploader_role_id
      AWS_SECRET_ACCESS_KEY: *aws_nfsvolume_uploader_role_secret
      AWS_ROLE_ARN: *aws_nfsvolume_uploader_role_arn
      GIT_USERNAME: *github_user
      GIT_EMAIL: *github_email
      GIT_BRANCH: &openssl-bump-branch bump-openssl-to-v((.:new-version))
      BLOB_NAME: openssl-
      BLOB_EXTENSION: .tar.gz
      BLOB_DIRECTORY: test-dependencies/
  - put: nfs-volume-release-master
    params:
      repository: nfs-volume-release-master
      force: true
      branch: *openssl-bump-branch
    on_success:
      task: create-pull-request
      image: image-cryo-essentials
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      input_mapping:
        source-repo: nfs-volume-release-master
      params:
        GITHUB_TOKEN: *github_access_token
        BASE: master
        BRANCH: *openssl-bump-branch
        TITLE: "Bump OpenSSL to v((.:new-version))"
        LABELS: dependencies

- name: bump-openldap
  plan:
  - in_parallel:
    - get: openldap-version
      trigger: true
    - get: nfs-volume-release-master
    - get: cryogenics-concourse-tasks
    - get: image-cryo-essentials
  - load_var: openldap
    file: openldap-version/version
    format: json
  - task: get-openldap-source
    image: image-cryo-essentials
    config:
      platform: linux
      params:
        NEW_VERSION: ((.:openldap.version.ref))
      run:
        path: /bin/sh
        args:
        - -c
        - |
            wget -O "openldap-tarball/openldap-${NEW_VERSION}.tgz" "https://www.openldap.org/software/download/OpenLDAP/openldap-release/openldap-${NEW_VERSION}.tgz"
            echo ${NEW_VERSION} > openldap-tarball/version
      outputs:
      - name: openldap-tarball
  - task: bump-openldap
    file: cryogenics-concourse-tasks/deps-automation/bump-blob/task.yml
    input_mapping:
      distributed-package: openldap-tarball
      bosh-release: nfs-volume-release-master
    output_mapping:
      bosh-release-updated: nfs-volume-release-master
    params:
      AWS_ACCESS_KEY_ID: *aws_nfsvolume_uploader_role_id
      AWS_SECRET_ACCESS_KEY: *aws_nfsvolume_uploader_role_secret
      AWS_ROLE_ARN: *aws_nfsvolume_uploader_role_arn
      GIT_USERNAME: *github_user
      GIT_EMAIL: *github_email
      GIT_BRANCH: &openldap-bump-branch bump-openldap-to-v((.:openldap.version.ref))
      BLOB_NAME: openldap-
      BLOB_EXTENSION: .tgz
      BLOB_DIRECTORY: openldap/
  - put: nfs-volume-release-master
    params:
      repository: nfs-volume-release-master
      force: true
      branch: *openldap-bump-branch
    on_success:
      task: create-pull-request
      image: image-cryo-essentials
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      input_mapping:
        source-repo: nfs-volume-release-master
      params:
        GITHUB_TOKEN: *github_access_token
        BASE: master
        BRANCH: *openldap-bump-branch
        TITLE: "Bump Openldap to v((.:openldap.version.ref))"
        LABELS: dependencies

  on_success:
    do:
    - put: nfs-volume-release-bump
      params:
        repository: nfs-volume-release-master
        force: true
        branch: &openldap-bump-branch bump-openldap-to-version-((.:openldap.version.ref))

    - task: create-pull-request
      image: image-cryo-essentials
      file: cryogenics-concourse-tasks/tasks/create-pr/task.yml
      input_mapping:
        repo: nfs-volume-release-bump
      params:
        GITHUB_TOKEN: *github_access_token
        BASE: master
        BRANCH: *openldap-bump-branch
        TITLE: "Bump OpenLDAP to version ((.:openldap.version.ref))"

- name: nfs-volume-release-job-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: cryogenics-concourse-tasks
      - get: mapfs-release
      - get: nfs-volume-release
        trigger: true
      - get: image-cryo-essentials
      - put: env-tas-jammy
        params:
          action: create
          duration: 6h
          resource: env
        timeout: 6h
  - task: rspec
    image: image-cryo-essentials
    file: persi-ci/scripts/ci/run-rspec.build.yml
    input_mapping:
      test-repo: nfs-volume-release
  - task: bosh-release-test
    image: image-cryo-essentials
    attempts: *number_of_retries
    file: cryogenics-concourse-tasks/vol-service/run-bosh-release-tests-in-shepherd/task.yml
    params:
      TEST_REPO: nfs-volume-release
    input_mapping:
      shepherd-env: env-tas-jammy
    ensure:
      do:
      - put: env-tas-jammy
        params:
          action: release
          resource: env-tas-jammy


- name: mapfs-release-job-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: mapfs-release
        trigger: true
      - get: mapfs-release-concourse-tasks
  - task: bosh-release-test
    file: mapfs-release-concourse-tasks/scripts/ci/run_bosh_release_tests.build.yml
    privileged: true
    timeout: 1h

- name: claim-env
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: nfs-volume-release
        trigger: true
        passed:
        - nfs-volume-release-job-tests
      - get: mapfs-release
        trigger: true
        passed:
        - mapfs-release-job-tests
  - put: env
    attempts: *number_of_retries
    timeout: 6h
    params:
      action: create
      duration: 24h
      resource: env
      timeout: 6h
  - task: output-env-details
    file: persi-ci/scripts/ci/claim-pooled-env.build.yml
    input_mapping:
      pooled-env: env

- name: claim-ldap-env
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: nfs-volume-release
        trigger: true
        passed:
        - nfs-volume-release-job-tests
      - get: mapfs-release
        trigger: true
        passed:
        - mapfs-release-job-tests
  - put: env
    attempts: *number_of_retries
    timeout: 6h
    params:
      action: create
      duration: 24h
      resource: env
      timeout: 6h
  - task: output-env-details
    file: persi-ci/scripts/ci/claim-pooled-env.build.yml
    input_mapping:
      pooled-env: env

- name: deploy-cf
  public: true
  build_logs_to_retain: 100
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: env
        passed: [claim-env]
        trigger: true
      - get: cf-deployment-concourse-tasks
      - get: cf-deployment
      - get: persi-ci
      - get: nfs-volume-release
        passed: [claim-env]
      - get: mapfs-release
        passed: [claim-env]
  - task: pin-cf-deployment-version
    file: persi-ci/scripts/ci/pin_cf_deployment_version.build.yml
    input_mapping:
      toolsmiths-env: env
  - task: collect-persi-ci-ops-files
    file: cf-deployment-concourse-tasks/collect-ops-files/task.yml
    input_mapping:
      base-ops-files: cf-deployment
      new-ops-files: persi-ci
    params:
      BASE_OPS_FILE_DIR: "operations"
  - task: generate-variables
    file: persi-ci/scripts/ci/generate_variables.build.yml
    params:
      GENERATE_NFS_VARS: true
      GENERATE_SMB_VARS: false
  - task: bosh-deploy-cf
    attempts: *number_of_retries
    file: persi-ci/scripts/ci/deploy-cf-with-multiple-releases.build.yml
    input_mapping:
      cf-deployment: cf-deployment
      toolsmiths-env: env
      ops-files: collected-ops-files
      vars-files: generated-vars
    params:
      VARS_FILES: "nfs-vars.yml"
      OPS_FILES: "operations/use-compiled-releases.yml
                  operations/scale-to-one-az.yml
                  operations/enable-nfs-volume-service.yml
                  updated-nfs-releases.yml
                  operations/test/enable-nfs-test-server.yml
                  operations/backup-and-restore/enable-backup-restore.yml
                  operations/backup-and-restore/enable-restore-nfs-broker.yml
                  operations/experimental/fast-deploy-with-downtime-and-danger.yml"
  - task: run-smoke-tests
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      ERRAND_NAME: smoke_tests
  - task: run-nfs-broker-errand
    attempts: *number_of_retries
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      ERRAND_NAME: nfsbrokerpush
      INSTANCE: nfs-broker-push

- name: pats
  plan:
  - in_parallel:
      steps:
      - get: cf-volume-services-acceptance-tests
      - get: persi-ci
      - get: env
        passed: [deploy-cf]
        trigger: true
      - get: nfs-volume-release
        passed: [deploy-cf]
      - get: mapfs-release
        passed: [deploy-cf]
  - task: generate-pats-config-nfs
    file: persi-ci/scripts/ci/generate_pats_config.build.yml
    input_mapping:
      smith-env: env
    params:
      VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers.sh
      CF_USERNAME: admin
      BIND_BOGUS_CONFIG: '{\"uid\":\"1000\",\"gid\":\"1000\"}'
      BIND_CONFIG: '["{\"uid\":\"1000\",\"gid\":\"1000\"}", "{\"uid\":\"1000\",\"gid\":\"1000\",\"mount\": \"/var/vcap/data/foo\"}", "{\"uid\":\"1000\",\"gid\":\"1000\", \"version\": \"3\"}", "{\"uid\":\"1000\",\"gid\":\"1000\", \"version\": \"4.0\"}", "{\"uid\":\"1000\",\"gid\":\"1000\", \"version\": \"4.1\"}", "{\"uid\":\"1000\",\"gid\":\"1000\", \"version\": \"4.2\"}"]'  # yamllint disable-line rule:line-length
      CREATE_BOGUS_CONFIG: '{\"share\":\"nfstestserver.service.cf.internal/export/nonexistensevol\"}'
      CREATE_CONFIG: '{\"share\":\"nfstestserver.service.cf.internal/export/users\"}'
      PLAN_NAME: Existing
      SERVICE_NAME: nfs
    output_mapping:
      pats-config: nfs-pats-config
  - task: run-pats-nfs
    input_mapping:
      pats-config: nfs-pats-config
    file: persi-ci/scripts/ci/run-pats.build.yml
    attempts: *number_of_retries
    params:
      PARALLEL_NODES: 5
      TEST_MOUNT_FAIL_LOGGING: true
      TEST_MOUNT_OPTIONS: true
      TEST_MULTI_CELL: true
      TEST_READ_ONLY: true

- name: cats-nfs
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: nfs-volume-release
        passed: [pats]
        trigger: true
      - get: env
        passed: [pats]
        trigger: true
      - get: persi-ci
      - get: cf-acceptance-tests
      - get: cf-deployment-concourse-tasks
      - get: cryogenics-concourse-tasks
      - get: image-cryo-essentials
  - task: alias-env
    image: image-cryo-essentials
    file: cryogenics-concourse-tasks/tasks/toolsmiths/bosh-envify/task.yml
    input_mapping:
      toolsmiths-env: env
      cryogenics-tasks: cryogenics-concourse-tasks
  - task: generate-cats-config
    image: image-cryo-essentials
    file: persi-ci/scripts/ci/generate_cats_config.build.yml
    input_mapping:
      smith-env: env
    params:
      VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers.sh
      CF_USERNAME: admin
      SERVICE_NAME: nfs
      PLAN_NAME: Existing
  - task: run-cats
    file: cf-deployment-concourse-tasks/run-cats/task.yml
    input_mapping:
      integration-config: cats-config
    params:
      CONFIG_FILE_PATH: cats.json

- name: drats
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: nfs-volume-release
        passed: [cats-nfs]
        trigger: true
      - get: bbr-binary-release
      - get: disaster-recovery-acceptance-tests
      - get: persi-ci
      - get: env
        passed: [cats-nfs]
        trigger: true
      - get: image-cryo-essentials
  - task: generate-integration-config
    file: persi-ci/scripts/ci/generate-drats-integration-config.build.yml
    params:
      INTEGRATION_CONFIG_FILE_PATH: config/drats-nfs.json
    input_mapping:
      smith-env: env
      integration-configs: persi-ci
  - task: drats-with-integration-config
    image: image-cryo-essentials
    file: disaster-recovery-acceptance-tests/ci/tasks/drats-with-integration-config/task.yml
    privileged: true
    input_mapping:
      drats-integration-config: updated-integration-configs
    params:
      CONFIG_FILE_PATH: config/drats-nfs.json

- name: deploy-cf-with-ldap
  public: true
  build_logs_to_retain: 100
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: env
        passed:
        - claim-ldap-env
        trigger: true
      - get: cf-deployment-concourse-tasks
      - get: cf-deployment
      - get: persi-ci
      - get: nfs-volume-release
        passed:
        - claim-ldap-env
      - get: mapfs-release
        passed:
        - claim-ldap-env
  - task: pin-cf-deployment-version
    file: persi-ci/scripts/ci/pin_cf_deployment_version.build.yml
    input_mapping:
      toolsmiths-env: env
  - task: collect-persi-ci-ops-files
    file: cf-deployment-concourse-tasks/collect-ops-files/task.yml
    input_mapping:
      base-ops-files: cf-deployment
      new-ops-files: persi-ci
    params:
      BASE_OPS_FILE_DIR: "operations"
  - task: generate-variables
    file: persi-ci/scripts/ci/generate_variables.build.yml
    params:
      GENERATE_NFS_VARS: true
      GENERATE_SMB_VARS: false
      LDAP_HOST: "nfstestldapserver.service.cf.internal"
      LDAP_SVC_USER: "cn=admin,dc=domain,dc=com"
      LDAP_SVC_PASS: "secret"
      LDAP_PORT: 636
      LDAP_PROTO: tcp
      LDAP_USER_FQDN: "ou=Users,dc=domain,dc=com"
  - task: bosh-deploy-cf
    file: persi-ci/scripts/ci/deploy-cf-with-multiple-releases.build.yml
    input_mapping:
      toolsmiths-env: env
      cf-deployment: cf-deployment
      ops-files: collected-ops-files
      vars-files: generated-vars
    params:
      VARS_FILES: "nfs-vars.yml"
      OPS_FILES: "operations/use-compiled-releases.yml
                  operations/scale-to-one-az.yml
                  operations/enable-nfs-volume-service.yml
                  updated-nfs-releases.yml
                  operations/enable-nfs-ldap.yml
                  operations/test/enable-nfs-test-server.yml
                  operations/test/enable-nfs-test-ldapserver.yml
                  operations/experimental/fast-deploy-with-downtime-and-danger.yml"
  - task: run-smoke-tests
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      ERRAND_NAME: smoke_tests
  - task: run-nfs-broker-errand
    attempts: *number_of_retries
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      toolsmiths-env: env
    params:
      ERRAND_NAME: nfsbrokerpush
      INSTANCE: nfs-broker-push

- name: pats-nfs-ldap
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: env
        passed:
        - deploy-cf-with-ldap
        trigger: true
      - get: cf-volume-services-acceptance-tests
      - get: persi-ci
      - get: nfs-volume-release
        passed:
        - deploy-cf-with-ldap
      - get: mapfs-release
        passed:
        - deploy-cf-with-ldap
  - in_parallel:
    - do:
      - task: generate-pats-config
        file: persi-ci/scripts/ci/generate_pats_config.build.yml
        input_mapping:
          smith-env: env
        params:
          VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers.sh
          BIND_CONFIG: '["{\"username\":\"user1000\",\"password\":\"secret\"}"]'
          CREATE_CONFIG: '{\"share\":\"nfstestserver.service.cf.internal/export/users\"}'
          DISALLOWED_LDAP_BIND_CONFIG: '{\"uid\":\"1000\",\"gid\":\"1000\"}'
          PLAN_NAME: Existing
          SERVICE_NAME: nfs
        output_mapping:
          pats-config: nfs-pats-config
      - task: run-pats
        input_mapping:
          pats-config: nfs-pats-config
        file: persi-ci/scripts/ci/run-pats.build.yml
        params:
          TEST_DOCKER_PORA: true
    - do:
      - task: generate-legacy-pats-config
        file: persi-ci/scripts/ci/generate_pats_config.build.yml
        input_mapping:
          smith-env: env
        params:
          VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers.sh
          BIND_CONFIG: '["{\"username\":\"user1000\",\"password\":\"secret\"}"]'
          CREATE_CONFIG: '{\"share\":\"nfstestserver.service.cf.internal/export/users\"}'
          DISALLOWED_LDAP_BIND_CONFIG: '{\"uid\":\"1000\",\"gid\":\"1000\"}'
          PLAN_NAME: Existing
          SERVICE_NAME: nfs-legacy
        output_mapping:
          pats-config: nfs-legacy-pats-config
      - task: run-legacy-pats
        input_mapping:
          pats-config: nfs-legacy-pats-config
        file: persi-ci/scripts/ci/run-pats.build.yml
        params:
          TEST_DOCKER_PORA: true

- name: unclaim-env
  plan:
  - get: env
    passed:
    - drats
    trigger: true
  - put: env
    params:
      action: release
      resource: env

- name: unclaim-ldap-env
  plan:
  - get: env
    passed:
    - pats-nfs-ldap
    trigger: true
  - put: env
    params:
      action: release
      resource: env

- name: merge-pr
  plan:
  - get: nfs-volume-release
    trigger: true
    passed:
    - pats-nfs-ldap
    - drats
  - put: nfs-volume-release
    params:
      merge: true
      repository: nfs-volume-release

- name: check-for-changes
  plan:
  - in_parallel:
    - get: every-week
      trigger: true
    - get: nfs-volume-release-master
    - get: nfs-volume-release-production-files-only

- name: shipit-nfs
  serial_groups:
  - nfs-version
  ensure:
    do:
    - put: nfsvolume-version
      params:
        file: nfsvolume-version/number
  plan:
  - in_parallel:
      steps:
      - get: persi-ci
      - get: cryogenics-concourse-tasks
      - get: nfs-volume-release-production-files-only
        trigger: true
        passed:
        - check-for-changes
      - get: release
        resource: nfs-volume-release-master
        passed:
        - check-for-changes
      - get: nfsvolume-version
        params:
          bump: patch
      - get: image-cryo-essentials
      - get: image-backup-and-restore
      - get: python-394
  - in_parallel:
    - do:
      - task: create-final-release
        image: image-cryo-essentials
        file: cryogenics-concourse-tasks/bosh-tasks/create-release/task.yml
        input_mapping:
          release-repo: release
          version: nfsvolume-version
        output_mapping:
          updated-release-repo: nfs-final-release
          updated-release-tarball: nfs-final-release-tarball
        params:
          AWS_ACCESS_KEY_ID: *aws_nfsvolume_uploader_role_id
          AWS_SECRET_ACCESS_KEY: *aws_nfsvolume_uploader_role_secret
          AWS_ROLE_ARN: *aws_nfsvolume_uploader_role_arn
          GIT_USERNAME: *github_user
          GIT_EMAIL: *github_email
          FINAL: true
          RELEASE_NAME: nfs-volume
      - put: nfs-volume-release-master
        params:
          repository: nfs-final-release
          tag: nfsvolume-version/number
          tag_prefix: v
    - do:
      - task: create-release-notes
        image: python-394
        file: cryogenics-concourse-tasks/release-automation/release-notes/task.yml
        input_mapping:
          git-repo: release
        params:
          USE_LATEST_PUBLISHED_TAG: true
      - task: format-release-notes
        image: image-backup-and-restore
        file: cryogenics-concourse-tasks/release-automation/format-release-notes/task.yml
        input_mapping:
          template-folder: cryogenics-concourse-tasks
        params:
          TEMPLATE_PATH: release-automation/release-notes-templates/release-notes-auto.md.erb
  - put: github-release-nfs
    params:
      name: nfsvolume-version/number
      tag: nfsvolume-version/number
      body: release-notes/release-notes.md
      tag_prefix: v
      globs:
      - nfs-final-release-tarball/nfs-volume-*.tgz
  - in_parallel:
    - load_var: github-release-url
      file: github-release-nfs/url
    - load_var: version-number
      file: nfsvolume-version/number
  - put: slack-cryo-notification
    params:
      text: |
        *nfs-volume*: version `((.:version-number))` has been published 🎉
        Next steps (cc <!subteam^S028XABEHAP>):
          1. Review the release notes and undraft the release <((.:github-release-url))|here>.

- name: manual-bump-nfs-patch
  serial_groups:
  - nfs-version
  plan:
  - get: nfs-volume-version
    resource: nfsvolume-version
    params:
      bump: final
  - put: nfsvolume-version
    params:
      bump: patch

- name: manual-bump-nfs-minor
  serial_groups:
  - nfs-version
  plan:
  - get: nfs-volume-version
    resource: nfsvolume-version
    params:
      bump: final
  - put: nfsvolume-version
    params:
      bump: minor

- name: manual-bump-nfs-major
  serial_groups:
  - nfs-version
  plan:
  - get: nfs-volume-version
    resource: nfsvolume-version
    params:
      bump: final
  - put: nfsvolume-version
    params:
      bump: major
