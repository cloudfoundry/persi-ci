---
#  This pipeline is set automatically, any non-committed changes will be lost.
#
# To set the pipeline, run:
#    fly -t cryo-runway set-pipeline -p mapfs-release -c mapfs-release.yml
#
# ************************************
# Secrets we need to run this pipeline
# ************************************

github_ssh_key: &github-ssh-key ((github.ssh_key))
github_access_token: &github-access-token ((github.access_token))
github_user: &github-user ((github.user))
github_email: &github-email ((github.email))

slack_webhook: &slack-webhook ((slack.webhook))

aws_mapfs_uploader_role_id: &aws-uploader-role-id ((aws/mapfs-uploader.role_id))
aws_mapfs_uploader_role_secret: &aws-uploader-role-secret ((aws/mapfs-uploader.role_secret))
aws_mapfs_uploader_role_arn: &aws-uploader-role-arn ((aws/mapfs-uploader.role_arn))

shepherd_token: &shepherd-token ((shepherd.sa_key))

# **************
# End of secrets
# **************
number_of_retries: &number_of_retries 2

groups:
- name: test
  jobs:
  - nfs-volume-release-job-tests
  - mapfs-release-job-tests
  - env-gate
  - claim-env
  - deploy-cf
  - cats-nfs
  - drats
  - pats
  - unclaim-env
  - claim-ldap-env
  - deploy-cf-with-ldap
  - pats-nfs-ldap
  - unclaim-ldap-env
  - merge-pr
- name: bump
  jobs:
  - bump-golang
  - update-go-directive-for-mapfs
  - update-go-directive-for-mapfs-release
- name: release
  jobs:
  - check-for-changes
  - shipit-mapfs
  - manual-bump-mapfs-patch
  - manual-bump-mapfs-minor
  - manual-bump-mapfs-major

resource_types:
- name: semver
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/concourse/semver-resource
    tag: "1.6"
  type: docker-image

- name: slack-notification
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cfcommunity/slack-notification-resource
    tag: latest

- name: git
  type: docker-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/concourse/git-resource
    tag: ubuntu

- name: pcf-pool
  type: docker-image
  source:
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
    tag: v1

- name: pull-request
  type: docker-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cryogenics/pr-queue-resource

resources:
- name: slack-cryo-notification
  type: slack-notification
  icon: bell-ring
  source:
    url: *slack-webhook

- name: every-week
  type: time
  source:
    interval: 168h  # 24h*7days

- name: every-hour
  type: time
  icon: clock-outline
  source:
    interval: 1h

- name: shepherd-env
  type: pcf-pool
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd-token
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: cfd
    compatibility_mode: environments-app
    debug: true

- name: persi-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry/persi-ci
    branch: master

- name: nfs-volume-release
  type: git
  source:
    branch: master
    private_key: *github-ssh-key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git
    ignore_paths:
    - scripts

- name: nfs-volume-release-concourse-tasks
  type: git
  source:
    private_key: *github-ssh-key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git
    branch: ci-fix-1

- name: mapfs
  type: git
  source:
    private_key: *github-ssh-key
    uri: git@github.com:cloudfoundry/mapfs.git

- name: mapfs-release
  type: pull-request
  source:
    base_branch: master
    access_token: *github-access-token
    repository: cloudfoundry/mapfs-release
    disable_forks: true

- name: mapfs-release-master
  type: git
  source:
    branch: master
    private_key: *github-ssh-key
    uri: git@github.com:cloudfoundry/mapfs-release.git

# Resource used to track production changes in the release job so that we don't
# trigger a release with only changes (CI, tests, etc.) that are not relevant to
# customers.
- name: mapfs-release-master-production-files-only
  type: git
  source:
    branch: master
    private_key: *github-ssh-key
    uri: git@github.com:cloudfoundry/mapfs-release.git
    paths:
    - .final_builds
    - LICENSE
    - NOTICE
    - config
    - jobs
    - packages
    - releases
    - src

- name: mapfs-version
  type: semver
  source:
    access_key_id: *aws-uploader-role-id
    bucket: mapfs-versions
    initial_version: 1.2.4
    key: current-version
    region_name: us-east-1
    secret_access_key: *aws-uploader-role-secret
    assume_role_arn: *aws-uploader-role-arn

- name: github-release-mapfs
  type: github-release
  source:
    user: cloudfoundry
    repository: mapfs-release
    drafts: true
    access_token: *github-access-token

- name: mapfs-release-concourse-tasks
  type: git
  source:
    branch: ci-fix
    private_key: *github-ssh-key
    uri: git@github.com:cloudfoundry/mapfs-release.git

- name: cf-deployment
  type: git
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-deployment.git

- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: cf-volume-services-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-volume-services-acceptance-tests.git

- name: cf-acceptance-tests
  type: git
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-acceptance-tests.git

- name: bbr-binary-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: bosh-backup-and-restore
    access_token: *github-access-token

- name: disaster-recovery-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/disaster-recovery-acceptance-tests.git

- name: golang-release
  type: git
  icon: tag
  source:
    uri: https://github.com/bosh-packages/golang-release.git
    tag_filter: v*

- icon: github
  name: mapfs-release-bump-golang
  source:
    branch: master
    private_key: *github-ssh-key
    uri: git@github.com:cloudfoundry/mapfs-release.git
  type: git

- icon: github
  name: mapfs-release-bump-golang-master
  source:
    branch: master
    private_key: *github-ssh-key
    uri: git@github.com:cloudfoundry/mapfs-release.git
    disable_ci_skip: true
  type: git

- name: cryogenics-concourse-tasks
  type: git
  icon: github
  source:
    uri: git@github.com:pivotal/cryogenics-concourse-tasks.git
    private_key: *github-ssh-key
    branch: main

- name: main-bosh-docker
  icon: docker
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/bosh/main-bosh-docker
    tag: latest

- name: cf-deployment-concourse-tasks-docker
  icon: docker
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/relintdockerhubpushbot/cf-deployment-concourse-tasks
    tag: latest

- name: cryogenics-essentials-docker
  icon: docker
  type: registry-image
  source:
    repository: &cryogenics-essentials harbor-repo.vmware.com/dockerhub-proxy-cache/cryogenics/essentials
    tag: latest

- name: backup-and-restore-docker
  icon: docker
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/pcfplatformrecovery/backup-and-restore
    tag: latest

- name: python-docker
  icon: docker
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/python
    tag: 3.9.4

- name: alpine-docker
  icon: docker
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/alpine
    tag: latest

- name: ruby-docker
  icon: docker
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/ruby
    tag: "3.2"

jobs:
- name: bump-golang
  plan:
  - in_parallel:
    - get: cryogenics-concourse-tasks
    - get: golang-release
      trigger: true
    - get: mapfs-release-bump-golang-master
    - get: cryogenics-essentials-docker
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - task: bump-golang
    file: cryogenics-concourse-tasks/deps-automation/bump-golang/task.yml
    image: cryogenics-essentials-docker
    input_mapping:
      release: mapfs-release-bump-golang-master
      vendored-package-release: golang-release
    params:
      VENDORED_PACKAGE_NAME: golang-1-linux
      VENDOR_UPDATES_BRANCH: &golang-vendor-branch bump-golang-vendor-((.:golang-release-version))
      COMMIT_USERNAME: bump-golang CI job
      COMMIT_USEREMAIL: mapbu-cryogenics@groups.vmware.com
      AWS_ACCESS_KEY_ID: *aws-uploader-role-id
      AWS_SECRET_ACCESS_KEY: *aws-uploader-role-secret
      AWS_ASSUME_ROLE_ARN: *aws-uploader-role-arn
  - put: mapfs-release-bump-golang
    params:
      repository: release-with-updated-vendored-package
      branch: *golang-vendor-branch
      force: true  # If the last PR got stuck just overwrite it with new stuff
  - try:
      # We've seen cases where there are 2 or more new releases of
      # golang-release which causes this job to trigger 2x or more. A PR will
      # be created on the 1st build. On the following ones, it is possible
      # that this task will fail as there exist already a PR (which is
      # probably flowing through the pipeline). To prevent this scenario
      # we're making this step best-effort.
      # This also makes the job idempotent. If we re-trigger the job but if
      # there are no new version of golang-release, this step will fail
      # saying "Your branch is up-to-date with
      # 'origin/golang-vendor-update'."
      task: create-golang-vendor-pull-request
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      image: cryogenics-essentials-docker
      params:
        BASE: master
        BRANCH: *golang-vendor-branch
        LABELS: dependencies
        TITLE: Update vendored package golang-1-linux
        MESSAGE: "This is an automatically generated Pull Request from the Cryogenics CI Bot.\
          \nI have detected a new version of [golang-release](https://github.com/bosh-packages/golang-release) and \
          automatically bumped\nthis package to benefit from the latest changes.\
          \nIf this does not look right, please reach out to the \
          [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU) team.\n"
      input_mapping:
        source-repo: mapfs-release-bump-golang

- name: update-go-directive-for-mapfs
  plan:
  - in_parallel:
    - get: golang-release
      trigger: true
      passed:
      - bump-golang
    - get: cryogenics-concourse-tasks
      passed:
      - bump-golang
    - get: mapfs
    - get: cryogenics-essentials-docker
  - task: update-go-directive
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    image: cryogenics-essentials-docker
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: mapfs
    output_mapping:
      golang-project-repo: mapfs
    params:
      COMMIT_USERNAME: bump-golang CI job
      COMMIT_USEREMAIL: mapbu-cryogenics@groups.vmware.com
      PATH_TO_GO_MODULE: .
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - put: mapfs
    params:
      repository: mapfs
      branch: &mapfs-gomod-update-branch bump-golang-vendor-((.:golang-release-version))
      force: true  # If the last PR got stuck just overwrite it with new stuff
  - task: create-gomod-directive-update-pull-request
    file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
    image: cryogenics-essentials-docker
    params:
      BASE: master
      BRANCH: *mapfs-gomod-update-branch
      LABELS: dependencies
      TITLE: Update gomod directive
      MESSAGE: |
        This is an automatically generated Pull Request from the Cryogenics CI
        Bot. I have detected a new version of
        [golang-release](https://github.com/bosh-packages/golang-release) and
        automatically updated the go mod directive for this go module. If this
        does not look right, please reach out to the
        [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU)
        team.
    input_mapping:
      source-repo: mapfs

- name: update-go-directive-for-mapfs-release
  plan:
  - in_parallel:
    - get: golang-release
      trigger: true
      passed:
      - bump-golang
    - get: cryogenics-concourse-tasks
      passed:
      - bump-golang
    - get: mapfs-release-master
    - get: cryogenics-essentials-docker
  - task: update-go-directive
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    image: cryogenics-essentials-docker
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: mapfs-release-master
    output_mapping:
      golang-project-repo: mapfs-release-master
    params:
      COMMIT_USERNAME: bump-golang CI job
      COMMIT_USEREMAIL: mapbu-cryogenics@groups.vmware.com
      PATH_TO_GO_MODULE: src/bosh_release
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - put: mapfs-release-master
    params:
      repository: mapfs-release-master
      branch: &mapfs-release-gomod-update-branch bump-release-golang-vendor-((.:golang-release-version))
      force: true  # If the last PR got stuck just overwrite it with new stuff
  - task: create-gomod-directive-update-pull-request
    file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
    image: cryogenics-essentials-docker
    params:
      BASE: master
      BRANCH: *mapfs-release-gomod-update-branch
      LABELS: dependencies
      TITLE: Update gomod directive
      MESSAGE: |
        This is an automatically generated Pull Request from the Cryogenics CI
        Bot. I have detected a new version of
        [golang-release](https://github.com/bosh-packages/golang-release) and
        automatically updated the go mod directive for this go module. If this
        does not look right, please reach out to the
        [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU)
        team.
    input_mapping:
      source-repo: mapfs-release-master

- name: nfs-volume-release-job-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: nfs-volume-release-concourse-tasks
      - get: mapfs-release
        trigger: true
      - get: nfs-volume-release
      - get: main-bosh-docker
      - get: ruby-docker
  - task: rspec
    file: persi-ci/scripts/ci/run-rspec.build.yml
    image: ruby-docker
    input_mapping:
      test-repo: nfs-volume-release
  - task: bosh-release-test
    image: main-bosh-docker
    attempts: *number_of_retries
    file: nfs-volume-release-concourse-tasks/scripts/ci/run_bosh_release_tests.build.yml
    privileged: true
    params:
      DOCKER_IMAGE: *cryogenics-essentials

- name: mapfs-release-job-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: mapfs-release
        trigger: true
      - get: mapfs-release-concourse-tasks
      - get: main-bosh-docker
  - task: bosh-release-test
    file: mapfs-release-concourse-tasks/scripts/ci/run_bosh_release_tests.build.yml
    image: main-bosh-docker
    attempts: *number_of_retries
    privileged: true
    timeout: 1h
    params:
      DOCKER_IMAGE: *cryogenics-essentials

- name: env-gate
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: nfs-volume-release
        passed:
        - nfs-volume-release-job-tests
      - get: mapfs-release
        trigger: true
        passed:
        - nfs-volume-release-job-tests
        - mapfs-release-job-tests
      - get: every-hour

- name: claim-env
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: alpine-docker
      - get: nfs-volume-release
        passed:
        - env-gate
      - get: mapfs-release
        trigger: true
        passed:
        - env-gate
  - put: shepherd-env
    params:
      action: create
      duration: 6h
      resource: shepherd-env
    timeout: 6h
  - put: shepherd-env
    params:
      action: extend
      expire-in: 6h
      resource: shepherd-env
  - task: output-env-details
    file: persi-ci/scripts/ci/claim-pooled-env.build.yml
    image: alpine-docker
    input_mapping:
      pooled-env: shepherd-env

- name: claim-ldap-env
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: alpine-docker
      - get: nfs-volume-release
        passed:
        - env-gate
      - get: mapfs-release
        trigger: true
        passed:
        - env-gate
  - put: shepherd-env
    params:
      action: create
      duration: 6h
      resource: shepherd-env
    timeout: 6h
  - put: shepherd-env
    params:
      action: extend
      expire-in: 2h
      resource: shepherd-env
  - task: output-env-details
    file: persi-ci/scripts/ci/claim-pooled-env.build.yml
    image: alpine-docker
    input_mapping:
      pooled-env: shepherd-env

- name: deploy-cf
  public: true
  build_logs_to_retain: 100
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: shepherd-env
        passed: [ claim-env ]
        trigger: true
      - get: cf-deployment-concourse-tasks
      - get: cf-deployment-concourse-tasks-docker
      - get: cryogenics-essentials-docker
      - get: cf-deployment
      - get: persi-ci
      - get: nfs-volume-release
        passed: [ claim-env ]
      - get: mapfs-release
        passed: [ claim-env ]
  - task: pin-cf-deployment-version
    file: persi-ci/scripts/ci/pin_cf_deployment_version.build.yml
    image: cf-deployment-concourse-tasks-docker
    input_mapping:
      toolsmiths-env: shepherd-env
  - task: collect-persi-ci-ops-files
    file: cf-deployment-concourse-tasks/collect-ops-files/task.yml
    image: cf-deployment-concourse-tasks-docker
    input_mapping:
      base-ops-files: cf-deployment
      new-ops-files: persi-ci
    params:
      BASE_OPS_FILE_DIR: "operations"
  - task: generate-variables
    file: persi-ci/scripts/ci/generate_variables.build.yml
    image: cf-deployment-concourse-tasks-docker
    input_mapping:
      smith-env: shepherd-env
    params:
      GENERATE_NFS_VARS: true
      GENERATE_SMB_VARS: false
  - task: bosh-deploy-cf
    attempts: *number_of_retries
    file: persi-ci/scripts/ci/deploy-cf-with-multiple-releases.build.yml
    image: cryogenics-essentials-docker
    input_mapping:
      cf-deployment: cf-deployment
      toolsmiths-env: shepherd-env
      ops-files: collected-ops-files
      vars-files: generated-vars
    params:
      VARS_FILES: "nfs-vars.yml"
      OPS_FILES: "operations/use-compiled-releases.yml
                  operations/scale-to-one-az.yml
                  operations/enable-nfs-volume-service.yml
                  updated-nfs-releases.yml
                  operations/test/enable-nfs-test-server.yml
                  operations/backup-and-restore/enable-backup-restore.yml
                  operations/backup-and-restore/enable-restore-nfs-broker.yml
                  operations/experimental/fast-deploy-with-downtime-and-danger.yml"
  - task: run-smoke-tests
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    image: cryogenics-essentials-docker
    input_mapping:
      toolsmiths-env: shepherd-env
    params:
      ERRAND_NAME: smoke_tests
  - task: run-nfs-broker-errand
    attempts: *number_of_retries
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    image: cryogenics-essentials-docker
    input_mapping:
      toolsmiths-env: shepherd-env
    params:
      ERRAND_NAME: nfsbrokerpush
      INSTANCE: nfs-broker-push

- name: cats-nfs
  serial_groups:
  - acceptance-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: nfs-volume-release
        passed: [ deploy-cf ]
      - get: shepherd-env
        passed: [ deploy-cf ]
        trigger: true
      - get: persi-ci
      - get: cf-acceptance-tests
      - get: cf-deployment-concourse-tasks
      - get: cryogenics-essentials-docker
      - get: mapfs-release
        passed: [ deploy-cf ]
  - task: generate-cats-config
    file: persi-ci/scripts/ci/generate_cats_config.build.yml
    image: cryogenics-essentials-docker
    input_mapping:
      smith-env: shepherd-env
    params:
      VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers_shp.sh
      CF_USERNAME: admin
      PLAN_NAME: Existing
      SERVICE_NAME: nfs
  - task: run-cats
    file: cf-deployment-concourse-tasks/run-cats/task.yml
    image: cryogenics-essentials-docker
    input_mapping:
      integration-config: cats-config
    params:
      CONFIG_FILE_PATH: cats.json

- name: drats
  serial: true
  serial_groups:
  - acceptance-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: nfs-volume-release
        passed: [ deploy-cf ]
      - get: bbr-binary-release
      - get: disaster-recovery-acceptance-tests
      - get: cryogenics-essentials-docker
      - get: persi-ci
      - get: mapfs-release
        passed: [ deploy-cf ]
      - get: shepherd-env
        passed: [ deploy-cf ]
        trigger: true
  - task: generate-integration-config
    file: persi-ci/scripts/ci/generate-drats-integration-config.build.yml
    image: cryogenics-essentials-docker
    params:
      INTEGRATION_CONFIG_FILE_PATH: config/drats-nfs.json
      UPDATE_INTEGRATION_CONFIG_SCRIPT: persi-ci/scripts/ci/drats-update-integration-config-shp.sh
    input_mapping:
      integration-configs: persi-ci
      smith-env: shepherd-env
  - task: drats-with-integration-config
    file: disaster-recovery-acceptance-tests/ci/tasks/drats-with-integration-config/task.yml
    image: cryogenics-essentials-docker
    privileged: true
    input_mapping:
      drats-integration-config: updated-integration-configs
    params:
      CONFIG_FILE_PATH: config/drats-nfs.json

- name: pats
  serial_groups:
  - acceptance-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: cf-volume-services-acceptance-tests
      - get: persi-ci
      - get: cryogenics-essentials-docker
      - get: shepherd-env
        passed: [ deploy-cf ]
        trigger: true
      - get: nfs-volume-release
        passed: [ deploy-cf ]
      - get: mapfs-release
        passed: [ deploy-cf ]
  - task: generate-pats-config-nfs
    file: persi-ci/scripts/ci/generate_pats_config_shp.build.yml
    image: cryogenics-essentials-docker
    params:
      VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers_shp.sh
      CF_USERNAME: admin
      BIND_BOGUS_CONFIG: '{\"uid\":\"1000\",\"gid\":\"1000\"}'
      BIND_CONFIG: '["{\"uid\":\"1000\",\"gid\":\"1000\"}", "{\"uid\":\"1000\",\"gid\":\"1000\",\"mount\": \"/var/vcap/data/foo\"}", "{\"uid\":\"1000\",\"gid\":\"1000\", \"version\": \"3\"}", "{\"uid\":\"1000\",\"gid\":\"1000\", \"version\": \"4.0\"}", "{\"uid\":\"1000\",\"gid\":\"1000\", \"version\": \"4.1\"}", "{\"uid\":\"1000\",\"gid\":\"1000\", \"version\": \"4.2\"}"]'  # yamllint disable-line rule:line-length
      CREATE_BOGUS_CONFIG: '{\"share\":\"nfstestserver.service.cf.internal/export/nonexistensevol\"}'
      CREATE_CONFIG: '{\"share\":\"nfstestserver.service.cf.internal/export/users\"}'
      PLAN_NAME: Existing
      SERVICE_NAME: nfs
    input_mapping:
      smith-env: shepherd-env
    output_mapping:
      pats-config: nfs-pats-config
  - task: run-pats-nfs
    file: persi-ci/scripts/ci/run-pats.build.yml
    image: cryogenics-essentials-docker
    input_mapping:
      pats-config: nfs-pats-config
    attempts: *number_of_retries
    params:
      PARALLEL_NODES: 5
      TEST_MOUNT_FAIL_LOGGING: true
      TEST_MOUNT_OPTIONS: true
      TEST_MULTI_CELL: true
      TEST_READ_ONLY: true

- name: deploy-cf-with-ldap
  public: true
  build_logs_to_retain: 100
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: shepherd-env
        passed:
        - claim-ldap-env
        trigger: true
      - get: cf-deployment-concourse-tasks
      - get: cf-deployment
      - get: persi-ci
      - get: cryogenics-essentials-docker
      - get: nfs-volume-release
        passed:
        - claim-ldap-env
      - get: mapfs-release
        passed:
        - claim-ldap-env
  - task: pin-cf-deployment-version
    file: persi-ci/scripts/ci/pin_cf_deployment_version.build.yml
    image: cryogenics-essentials-docker
    input_mapping:
      toolsmiths-env: shepherd-env
  - task: collect-persi-ci-ops-files
    file: cf-deployment-concourse-tasks/collect-ops-files/task.yml
    image: cryogenics-essentials-docker
    input_mapping:
      base-ops-files: cf-deployment
      new-ops-files: persi-ci
    params:
      BASE_OPS_FILE_DIR: "operations"
  - task: generate-variables
    file: persi-ci/scripts/ci/generate_variables.build.yml
    image: cryogenics-essentials-docker
    input_mapping:
      smith-env: shepherd-env
    params:
      GENERATE_NFS_VARS: true
      GENERATE_SMB_VARS: false
      LDAP_HOST: "nfstestldapserver.service.cf.internal"
      LDAP_SVC_USER: "cn=admin,dc=domain,dc=com"
      LDAP_SVC_PASS: "secret"
      LDAP_PORT: 636
      LDAP_PROTO: tcp
      LDAP_USER_FQDN: "ou=Users,dc=domain,dc=com"
  - task: bosh-deploy-cf
    file: persi-ci/scripts/ci/deploy-cf-with-multiple-releases.build.yml
    image: cryogenics-essentials-docker
    input_mapping:
      toolsmiths-env: shepherd-env
      cf-deployment: cf-deployment
      ops-files: collected-ops-files
      vars-files: generated-vars
    params:
      VARS_FILES: "nfs-vars.yml"
      OPS_FILES: "operations/use-compiled-releases.yml
                  operations/scale-to-one-az.yml
                  operations/enable-nfs-volume-service.yml
                  updated-nfs-releases.yml
                  operations/enable-nfs-ldap.yml
                  operations/test/enable-nfs-test-server.yml
                  operations/test/enable-nfs-test-ldapserver.yml
                  operations/experimental/fast-deploy-with-downtime-and-danger.yml"
  - task: run-smoke-tests
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    image: cryogenics-essentials-docker
    input_mapping:
      toolsmiths-env: shepherd-env
    params:
      ERRAND_NAME: smoke_tests
  - task: run-nfs-broker-errand
    attempts: *number_of_retries
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    image: cryogenics-essentials-docker
    input_mapping:
      toolsmiths-env: shepherd-env
    params:
      ERRAND_NAME: nfsbrokerpush
      INSTANCE: nfs-broker-push

- name: pats-nfs-ldap
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: shepherd-env
        passed:
        - deploy-cf-with-ldap
        trigger: true
      - get: cf-volume-services-acceptance-tests
      - get: persi-ci
      - get: cryogenics-essentials-docker
      - get: nfs-volume-release
        passed:
        - deploy-cf-with-ldap
      - get: mapfs-release
        passed:
        - deploy-cf-with-ldap
  - in_parallel:
      fail_fast: true
      steps:
      - task: generate-legacy-pats-config
        file: persi-ci/scripts/ci/generate_pats_config_shp.build.yml
        image: cryogenics-essentials-docker
        params:
          VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers_shp.sh
          BIND_CONFIG: '["{\"username\":\"user1000\",\"password\":\"secret\"}"]'
          CREATE_CONFIG: '{\"share\":\"nfstestserver.service.cf.internal/export/users\"}'
          DISALLOWED_LDAP_BIND_CONFIG: '{\"uid\":\"1000\",\"gid\":\"1000\"}'
          PLAN_NAME: Existing
          SERVICE_NAME: nfs-legacy
        input_mapping:
          smith-env: shepherd-env
        output_mapping:
          pats-config: nfs-legacy-pats-config
      - task: generate-pats-config
        file: persi-ci/scripts/ci/generate_pats_config_shp.build.yml
        image: cryogenics-essentials-docker
        params:
          VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers_shp.sh
          BIND_CONFIG: '["{\"username\":\"user1000\",\"password\":\"secret\"}"]'
          CREATE_CONFIG: '{\"share\":\"nfstestserver.service.cf.internal/export/users\"}'
          DISALLOWED_LDAP_BIND_CONFIG: '{\"uid\":\"1000\",\"gid\":\"1000\"}'
          PLAN_NAME: Existing
          SERVICE_NAME: nfs
        input_mapping:
          smith-env: shepherd-env
        output_mapping:
          pats-config: nfs-pats-config
  - in_parallel:
      fail_fast: true
      steps:
      - task: run-legacy-pats
        file: persi-ci/scripts/ci/run-pats.build.yml
        image: cryogenics-essentials-docker
        input_mapping:
          pats-config: nfs-legacy-pats-config
        params:
          TEST_DOCKER_PORA: true
      - task: run-pats
        file: persi-ci/scripts/ci/run-pats.build.yml
        image: cryogenics-essentials-docker
        input_mapping:
          pats-config: nfs-pats-config
        params:
          TEST_DOCKER_PORA: true

- name: unclaim-env
  plan:
  - get: shepherd-env
    passed:
    - pats
    - drats
    - cats-nfs
    trigger: true
  - put: shepherd-env
    params:
      action: release
      resource: shepherd-env

- name: unclaim-ldap-env
  plan:
  - get: shepherd-env
    passed:
    - pats-nfs-ldap
    trigger: true
  - put: shepherd-env
    params:
      action: release
      resource: shepherd-env

- name: merge-pr
  plan:
  - get: mapfs-release
    trigger: true
    passed:
    - pats
    - pats-nfs-ldap
    - drats
    - cats-nfs
  - put: mapfs-release
    params:
      merge: true
      repository: mapfs-release

- name: check-for-changes
  plan:
  - in_parallel:
    - get: every-week
      trigger: true
    - get: mapfs-release-master
    - get: mapfs-release-master-production-files-only

- name: shipit-mapfs
  serial_groups:
  - mapfs-version
  ensure:
    do:
    - put: mapfs-version
      params:
        bump: patch
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: cryogenics-concourse-tasks
      - get: cryogenics-essentials-docker
      - get: backup-and-restore-docker
      - get: python-docker
      - get: release
        resource: mapfs-release-master
      - get: mapfs-release-master-production-files-only
        trigger: true
        passed:
        - check-for-changes
      - get: version
        resource: mapfs-version
        params:
          bump: final
  - task: create-final-release
    file: cryogenics-concourse-tasks/bosh-tasks/create-release/task.yml
    image: cryogenics-essentials-docker
    input_mapping:
      release-repo: release
    output_mapping:
      updated-release-repo: mapfs-final-release
      updated-release-tarball: mapfs-final-release-tarball
    params:
      AWS_ACCESS_KEY_ID: *aws-uploader-role-id
      AWS_SECRET_ACCESS_KEY: *aws-uploader-role-secret
      AWS_ROLE_ARN: *aws-uploader-role-arn
      GIT_USERNAME: *github-user
      GIT_EMAIL: *github-email
      FINAL: true
      RELEASE_NAME: mapfs
  - task: create-release-notes
    file: cryogenics-concourse-tasks/release-automation/release-notes/task.yml
    image: python-docker
    input_mapping:
      git-repo: release
    params:
      USE_LATEST_PUBLISHED_TAG: true
  - task: format-release-notes
    file: cryogenics-concourse-tasks/release-automation/format-release-notes/task.yml
    image: backup-and-restore-docker
    input_mapping:
      template-folder: cryogenics-concourse-tasks
    params:
      TEMPLATE_PATH: release-automation/release-notes-templates/release-notes-auto.md.erb
  - put: version
    resource: mapfs-version
    params:
      file: version/number
  - put: mapfs-release-master
    params:
      repository: mapfs-final-release
      tag: version/number
      tag_prefix: v
  - put: github-release-mapfs
    params:
      name: version/number
      tag: version/number
      body: release-notes/release-notes.md
      tag_prefix: v
      globs:
      - mapfs-final-release-tarball/mapfs-*.tgz
  - in_parallel:
    - load_var: github-release-url
      file: github-release-mapfs/url
    - load_var: version-number
      file: version/number
  - put: slack-cryo-notification
    params:
      text: |
        *mapfs*: version `((.:version-number))` has been published 🎉
        Next steps (cc <!subteam^S028XABEHAP>):
          1. Review the release notes and undraft the release <((.:github-release-url))|here>.

- name: manual-bump-mapfs-patch
  serial_groups:
  - mapfs-version
  plan:
  - get: version
    resource: mapfs-version
    params:
      bump: final
  - put: mapfs-version
    params:
      bump: patch

- name: manual-bump-mapfs-minor
  serial_groups:
  - mapfs-version
  plan:
  - get: version
    resource: mapfs-version
    params:
      bump: final
  - put: mapfs-version
    params:
      bump: minor

- name: manual-bump-mapfs-major
  serial_groups:
  - mapfs-version
  plan:
  - get: version
    resource: mapfs-version
    params:
      bump: final
  - put: mapfs-version
    params:
      bump: major
