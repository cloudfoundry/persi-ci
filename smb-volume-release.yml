---
#  To set the pipeline, run:
#    fly -t runway-cryogenics set-pipeline -p smb-volume-release -c smb-volume-release.yml
#
# ************************************
# Secrets we need to run this pipeline
# ************************************

aws-uploader:
  # CloudGate credentials for the service user assuming a role in CF Diego Persistence CI
  role_arn: &upload_role_arn ((aws/volume-services/smb.role_arn))
  role_id: &upload_role_id ((aws/volume-services/smb.role_id))
  role_secret: &upload_role_secret ((aws/volume-services/smb.role_secret))
github:
  access_token: &github_access_token ((github.access_token))
  # Access token used for accessing PRs, GH release, and BBR binary GH release
  ssh_key: &github_ssh_key ((github.ssh_key))
  # SSH key is used for accessing the GH release, as well as
  email: &github_email ((github.email))
  user: &github_user ((github.user))
  # GH user and email used to cut the final version
cats:
  remote_path: ((smb_cats.remote_path))  # used in the composite values below
  username: ((smb_cats.username))  # used in the composite values below
  password: ((smb_cats.password))  # used in the composite values below
  create_config: &cats_create_config '{\"share\": \"((smb_cats.remote_path))\", \"username\": \"((smb_cats.username))\", \"password\": \"((smb_cats.password))\"}'  # yamllint disable-line rule:line-length
pats:
  password: &pats_password ((smb_pats.password))
  username: &pats_username ((smb_pats.username))
  create_config: &pats_create_config '{\"share\":\"((smb_cats.remote_path))\"}'
  bind_config: &pats_bind_config '["{\"username\":\"((smb_cats.username))\",\"password\":\"((smb_cats.password))\", \"domain\": \"foo\"}", "{\"username\":\"((smb_cats.username))\",\"password\":\"((smb_cats.password))\", \"domain\": \"foo\", \"version\": \"3.0\"}", "{\"username\":\"((smb_cats.username))\",\"password\":\"((smb_cats.password))\", \"mount\": \"/var/vcap/data/foo\", \"domain\": \"foo\"}"]'  # yamllint disable-line rule:line-length
slack.webhook: &slack_webhook ((slack.webhook))
# Slack webhook is used for notifications, currently its origins are unknown
toolsmiths.api_token: &toolsmiths_api_token ((toolsmiths.api_token))
# Toolsmiths API token was needed on 2023-07-07 for claiming TAS environments to run xATS test suites.
# The token was given to us by the #cf-toolsmiths team, and is in lastpass at
# Shared-Cryogenics/infrastructure-root/cryo-toolsmiths-api-token

# **************
# End of secrets
# **************

groups:
- name: test
  jobs:
  - smb-volume-release-job-tests
  - cats
  - drats
  - pats
  - deploy-cf
  - unclaim-env
  - merge-pr
- name: bump
  jobs:
  - bump-golang
  - update-go-directive-for-smbdriver-for-gomod-directive-updates
  - update-go-directive-for-smbbroker-for-gomod-directive-updates
  - &bump-blob-autoconf-job-name bump-blob-autoconf
  - &bump-blob-automake-job-name bump-blob-automake
  - &bump-blob-libtool-job-name bump-blob-libtool
- name: release
  jobs:
  - check-for-changes
  - shipit-smb
  - manual-bump-smb-patch
  - manual-bump-smb-minor
  - manual-bump-smb-major

resources:
- name: slack-cryo-notification
  type: slack-notification
  icon: bell-ring
  source:
    url: *slack_webhook

- name: every-week
  type: time
  source:
    interval: 168h  # 24h*7days

- name: stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-jammy-go_agent

- name: smith-env
  type: pcf-pool
  source:
    api_token: *toolsmiths_api_token
    hostname: environments.toolsmiths.cf-app.com
    pool_name: cf-deployment

- name: persi-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry/persi-ci
    branch: master

- name: smb-volume-release
  type: pull-request
  source:
    base_branch: master
    access_token: *github_access_token
    repository: cloudfoundry/smb-volume-release
    disable_forks: true

- name: smb-volume-release-master
  type: git
  icon: github
  source:
    branch: master
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/smb-volume-release.git

- name: smb-volume-release-master-write
  type: git
  icon: github
  source:
    branch: master
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/smb-volume-release.git

- name: smb-volume-release-master-production-files-only
  type: git
  source:
    branch: master
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/smb-volume-release.git
    paths:
    - .final_builds
    - LICENSE
    - NOTICE
    - config
    - jobs
    - packages
    - releases
    - src

- name: smb-volume-version
  type: semver
  source:
    access_key_id: *upload_role_id
    bucket: smb-volume-release-versions
    initial_version: 3.0.2
    key: current-version
    region_name: us-east-1
    secret_access_key: *upload_role_secret
    assume_role_arn: *upload_role_arn

- name: github-release-smb
  type: github-release
  source:
    user: cloudfoundry
    repository: smb-volume-release
    drafts: true
    access_token: *github_access_token

- name: smb-volume-release-concourse-tasks
  type: git
  source:
    uri: https://github.com/cloudfoundry/smb-volume-release.git

- name: cf-deployment
  type: git
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-deployment.git

- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: cf-volume-services-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-volume-services-acceptance-tests.git

- name: cf-acceptance-tests
  type: git
  source:
    branch: release-candidate
    uri: https://github.com/cloudfoundry/cf-acceptance-tests.git

- name: bbr-binary-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: bosh-backup-and-restore
    access_token: *github_access_token

- name: disaster-recovery-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/disaster-recovery-acceptance-tests.git

- name: golang-release
  type: git
  icon: tag
  source:
    uri: https://github.com/bosh-packages/golang-release.git
    tag_filter: v*

- icon: github
  name: smb-volume-release-bump-golang
  source:
    branch: master
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/smb-volume-release.git
  type: git

- icon: github
  name: smb-volume-release-bump-golang-master
  source:
    branch: master
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/smb-volume-release.git
    disable_ci_skip: true
  type: git

- name: cryogenics-concourse-tasks
  type: git
  icon: github
  source:
    uri: git@github.com:pivotal/cryogenics-concourse-tasks.git
    private_key: *github_ssh_key
    branch: main

# This resource must only be used for gomod directive updates:
#  https://github.com/concourse/git-resource/blob/master/README.md?plain=1#L341-L345
- name: smbdriver-for-gomod-directive-updates
  type: git
  icon: github
  source:
    uri: git@github.com:cloudfoundry/smbdriver.git
    private_key: *github_ssh_key

# This resource must only be used for gomod directive updates:
#  https://github.com/concourse/git-resource/blob/master/README.md?plain=1#L341-L345
- name: smbbroker-for-gomod-directive-updates
  type: git
  icon: github
  source:
    uri: git@github.com:cloudfoundry/smbbroker.git
    private_key: *github_ssh_key


- name: cryogenics-essentials
  type: registry-image
  icon: docker
  source:
    repository: harbor-repo.vmware.com/cryogenics/essentials

- name: ruby
  type: docker-image
  icon: docker
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/library/ruby

- name: python-394
  type: docker-image
  icon: docker
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/library/python
    tag: 3.9.4

- name: image-cf-deployment-concourse-tasks
  type: docker-image
  icon: docker
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/relintdockerhubpushbot/cf-deployment-concourse-tasks

- name: image-backup-and-restore
  type: docker-image
  icon: docker
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/pcfplatformrecovery/backup-and-restore

- name: autoconf-latest
  type: ftp
  icon: download-network-outline
  source:
    url: 'ftp://ftp.gnu.org/gnu/autoconf/'
    version_regex: '^autoconf-(?P<version>[0-9][0-9.]+[0-9]).tar.gz$'

- name: automake-latest
  type: ftp
  icon: download-network-outline
  source:
    url: 'ftp://ftp.gnu.org/gnu/automake/'
    version_regex: '^automake-(?P<version>[0-9][0-9.]+[0-9]).tar.xz$'

- name: libtool-latest
  type: ftp
  icon: download-network-outline
  source:
    url: 'ftp://ftp.gnu.org/gnu/libtool/'
    version_regex: '^libtool-(?P<version>[0-9][0-9.]+[0-9]).tar.xz$'

resource_types:
- name: semver
  type: docker-image
  source:
    repository: concourse/semver-resource
    tag: "1.6"

- name: slack-notification
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cfcommunity/slack-notification-resource
    tag: latest

- name: pcf-pool
  type: docker-image
  source:
    repository: cftoolsmiths/toolsmiths-envs-resource

- name: git
  type: docker-image
  source:
    repository: concourse/git-resource
    tag: ubuntu

- name: pull-request
  type: docker-image
  source:
    repository: harbor-repo.vmware.com/cryogenics/pr-queue-resource

- name: ftp
  type: docker-image
  source:
    repository: harbor-repo.vmware.com/cryogenics/concourse-ftp-resource

jobs:
- name: *bump-blob-autoconf-job-name
  plan:
  - in_parallel:
    - get: autoconf-latest
      trigger: true
    - get: cryogenics-essentials
    - get: smb-volume-release-master
    - get: cryogenics-concourse-tasks
  - load_var: autoconf-version
    file: autoconf-latest/version
  - task: bump-autoconf
    file: cryogenics-concourse-tasks/deps-automation/bump-blob/task.yml
    image: cryogenics-essentials
    input_mapping:
      distributed-package: autoconf-latest
      bosh-release: smb-volume-release-master
    params:
      AWS_ACCESS_KEY_ID: *upload_role_id
      AWS_SECRET_ACCESS_KEY: *upload_role_secret
      AWS_ROLE_ARN: *upload_role_arn
      GIT_USERNAME: *github_user
      GIT_EMAIL: *github_email
      GIT_BRANCH: &bump-autoconf-branch bump-autoconf-to-((.:autoconf-version))
      BLOB_NAME: autoconf
      BLOB_EXTENSION: tar.gz
  - put: smb-volume-release-master-write
    params:
      repository: bosh-release-updated
      branch: *bump-autoconf-branch
  - try:
      task: create-autoconf-update-pr
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      image: cryogenics-essentials
      params:
        BASE: master
        BRANCH: *bump-autoconf-branch
        LABELS: dependencies
        TITLE: Update autoconf tarball blob to ((.:autoconf-version))
        MESSAGE: "This is an automatically generated Pull Request from the Cryogenics CI Bot.\
          \nI have detected a new version of [autoconf](https://ftp.gnu.org/gnu/autoconf/) and \
          automatically bumped\nthis package to benefit from the latest changes.\
          \nIf this does not look right, please reach out to the \
          [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU) team.\n"
      input_mapping:
        source-repo: smb-volume-release-master-write

- name: *bump-blob-automake-job-name
  plan:
  - in_parallel:
    - get: automake-latest
      trigger: true
    - get: cryogenics-essentials
    - get: smb-volume-release-master
    - get: cryogenics-concourse-tasks
  - load_var: automake-version
    file: automake-latest/version
  - task: bump-automake
    file: cryogenics-concourse-tasks/deps-automation/bump-blob/task.yml
    image: cryogenics-essentials
    input_mapping:
      distributed-package: automake-latest
      bosh-release: smb-volume-release-master
    params:
      AWS_ACCESS_KEY_ID: *upload_role_id
      AWS_SECRET_ACCESS_KEY: *upload_role_secret
      AWS_ROLE_ARN: *upload_role_arn
      GIT_USERNAME: *github_user
      GIT_EMAIL: *github_email
      GIT_BRANCH: &bump-automake-branch bump-automake-to-((.:automake-version))
      BLOB_NAME: automake
  - put: smb-volume-release-master-write
    params:
      repository: bosh-release-updated
      branch: *bump-automake-branch
  - try:
      task: create-automake-update-pr
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      image: cryogenics-essentials
      params:
        BASE: master
        BRANCH: *bump-automake-branch
        LABELS: dependencies
        TITLE: Update automake tarball blob to ((.:automake-version))
        MESSAGE: "This is an automatically generated Pull Request from the Cryogenics CI Bot.\
          \nI have detected a new version of [automake](https://ftp.gnu.org/gnu/automake/) and \
          automatically bumped\nthis package to benefit from the latest changes.\
          \nIf this does not look right, please reach out to the \
          [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU) team.\n"
      input_mapping:
        source-repo: smb-volume-release-master-write

- name: *bump-blob-libtool-job-name
  plan:
  - in_parallel:
    - get: libtool-latest
      trigger: true
    - get: cryogenics-essentials
    - get: smb-volume-release-master
    - get: cryogenics-concourse-tasks
  - load_var: libtool-version
    file: libtool-latest/version
  - task: bump-libtool
    file: cryogenics-concourse-tasks/deps-automation/bump-blob/task.yml
    image: cryogenics-essentials
    input_mapping:
      distributed-package: libtool-latest
      bosh-release: smb-volume-release-master
    params:
      AWS_ACCESS_KEY_ID: *upload_role_id
      AWS_SECRET_ACCESS_KEY: *upload_role_secret
      AWS_ROLE_ARN: *upload_role_arn
      GIT_USERNAME: *github_user
      GIT_EMAIL: *github_email
      GIT_BRANCH: &bump-libtool-branch bump-libtool-to-((.:libtool-version))
      BLOB_NAME: libtool
  - put: smb-volume-release-master-write
    params:
      repository: bosh-release-updated
      branch: *bump-libtool-branch
  - try:
      task: create-libtool-update-pr
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      image: cryogenics-essentials
      params:
        BASE: master
        BRANCH: *bump-libtool-branch
        LABELS: dependencies
        TITLE: Update libtool tarball blob to ((.:libtool-version))
        MESSAGE: "This is an automatically generated Pull Request from the Cryogenics CI Bot.\
          \nI have detected a new version of [libtool](https://ftp.gnu.org/gnu/libtool/) and \
          automatically bumped\nthis package to benefit from the latest changes.\
          \nIf this does not look right, please reach out to the \
          [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU) team.\n"
      input_mapping:
        source-repo: smb-volume-release-master-write

- name: bump-golang
  plan:
  - in_parallel:
    - get: cryogenics-concourse-tasks
    - get: golang-release
      trigger: true
    - get: smb-volume-release-bump-golang-master
    - get: cryogenics-essentials
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - task: bump-golang
    file: cryogenics-concourse-tasks/deps-automation/bump-golang/task.yml
    image: cryogenics-essentials
    input_mapping:
      release: smb-volume-release-bump-golang-master
      vendored-package-release: golang-release
    params:
      VENDORED_PACKAGE_NAME: golang-1-linux
      VENDOR_UPDATES_BRANCH: &golang-vendor-branch bump-golang-vendor-((.:golang-release-version))
      COMMIT_USERNAME: bump-golang CI job
      COMMIT_USEREMAIL: mapbu-cryogenics@groups.vmware.com
      AWS_ACCESS_KEY_ID: *upload_role_id
      AWS_SECRET_ACCESS_KEY: *upload_role_secret
      AWS_ASSUME_ROLE_ARN: *upload_role_arn
  - put: smb-volume-release-bump-golang
    params:
      repository: release-with-updated-vendored-package
      branch: *golang-vendor-branch
  - try:
      # We've seen cases where there are 2 or more new releases of
      # golang-release which causes this job to trigger 2x or more. A PR will
      # be created on the 1st build. On the following ones, it is possible
      # that this task will fail as there exist already a PR (which is
      # probably flowing through the pipeline). To prevent this scenario
      # we're making this step best-effort.
      # This also makes the job idempotent. If we retrigger the job but if
      # there are no new version of golang-release, this step will fail
      # saying "Your branch is up-to-date with
      # 'origin/golang-vendor-update'."
      task: create-golang-vendor-pull-request
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      image: cryogenics-essentials
      params:
        BASE: master
        BRANCH: *golang-vendor-branch
        LABELS: dependencies
        TITLE: Update vendored package golang-1-linux
        MESSAGE: "This is an automatically generated Pull Request from the Cryogenics CI Bot.\
          \nI have detected a new version of [golang-release](https://github.com/bosh-packages/golang-release) and \
          automatically bumped\nthis package to benefit from the latest changes.\
          \nIf this does not look right, please reach out to the \
          [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU) team.\n"
      input_mapping:
        source-repo: smb-volume-release-bump-golang

- name: update-go-directive-for-smbbroker-for-gomod-directive-updates
  plan:
  - in_parallel:
    - get: golang-release
      trigger: true
      passed:
      - bump-golang
    - get: cryogenics-concourse-tasks
      passed:
      - bump-golang
    - get: smbbroker-for-gomod-directive-updates
      params:
        branch: master
    - get: cryogenics-essentials
  - task: update-go-directive
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    image: cryogenics-essentials
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: smbbroker-for-gomod-directive-updates
    output_mapping:
      golang-project-repo: smbbroker-for-gomod-directive-updates
    params:
      COMMIT_USERNAME: bump-golang CI job
      COMMIT_USEREMAIL: mapbu-cryogenics@groups.vmware.com
      PATH_TO_GO_MODULE: .
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - put: smbbroker-for-gomod-directive-updates
    params:
      repository: smbbroker-for-gomod-directive-updates
      branch: &mapfs-gomod-update-branch bump-golang-vendor-((.:golang-release-version))
      force: true  # If the last PR got stuck just overwrite it with new stuff
  - task: create-gomod-directive-updates-pull-request
    file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
    image: cryogenics-essentials
    params:
      BASE: master
      BRANCH: *mapfs-gomod-update-branch
      LABELS: dependencies
      TITLE: Update gomod directive
      MESSAGE: |
        This is an automatically generated Pull Request from the Cryogenics CI
        Bot. I have detected a new version of
        [golang-release](https://github.com/bosh-packages/golang-release) and
        automatically updated the go mod directive for this go module. If this
        does not look right, please reach out to the
        [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU)
        team.
    input_mapping:
      source-repo: smbbroker-for-gomod-directive-updates

- name: update-go-directive-for-smbdriver-for-gomod-directive-updates
  plan:
  - in_parallel:
    - get: golang-release
      trigger: true
      passed:
      - bump-golang
    - get: cryogenics-concourse-tasks
      passed:
      - bump-golang
    - get: smbdriver-for-gomod-directive-updates
      params:
        branch: master
    - get: cryogenics-essentials
  - task: update-go-directive
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    image: cryogenics-essentials
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: smbdriver-for-gomod-directive-updates
    output_mapping:
      golang-project-repo: smbdriver-for-gomod-directive-updates
    params:
      COMMIT_USERNAME: bump-golang CI job
      COMMIT_USEREMAIL: mapbu-cryogenics@groups.vmware.com
      PATH_TO_GO_MODULE: .
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - put: smbdriver-for-gomod-directive-updates
    params:
      repository: smbdriver-for-gomod-directive-updates
      branch: &mapfs-gomod-update-branch bump-golang-vendor-((.:golang-release-version))
      force: true  # If the last PR got stuck just overwrite it with new stuff
  - task: create-gomod-directive-updates-pull-request
    file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
    image: cryogenics-essentials
    params:
      BASE: master
      BRANCH: *mapfs-gomod-update-branch
      LABELS: dependencies
      TITLE: Update gomod directive
      MESSAGE: |
        This is an automatically generated Pull Request from the Cryogenics CI
        Bot. I have detected a new version of
        [golang-release](https://github.com/bosh-packages/golang-release) and
        automatically updated the go mod directive for this go module. If this
        does not look right, please reach out to the
        [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU)
        team.
    input_mapping:
      source-repo: smbdriver-for-gomod-directive-updates

- name: smb-volume-release-job-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: ruby
      - get: smb-volume-release
        trigger: true
      - get: stemcell
      - put: smith-env
        params:
          action: claim
  - task: rspec
    file: persi-ci/scripts/ci/run-rspec.build.yml
    image: ruby
    input_mapping:
      test-repo: smb-volume-release
  - task: bosh-release-test
    file: persi-ci/scripts/ci/run_bosh_release_tests.build.yml
    attempts: 3
    input_mapping:
      test-repo: smb-volume-release
      env: smith-env
    on_failure:
      put: smith-env
      params:
        action: unclaim
        env_file: smith-env/metadata

- name: deploy-cf
  public: true
  build_logs_to_retain: 100
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: smith-env
        passed: [smb-volume-release-job-tests]
        trigger: true
      - get: cf-deployment-concourse-tasks
      - get: image-cf-deployment-concourse-tasks
      - get: cryogenics-essentials
      - get: cf-deployment
      - get: persi-ci
      - get: smb-volume-release
        passed: [smb-volume-release-job-tests]
  - task: pin-cf-deployment-version
    file: persi-ci/scripts/ci/pin_cf_deployment_version.build.yml
    image: image-cf-deployment-concourse-tasks
    input_mapping:
      toolsmiths-env: smith-env
  - task: collect-persi-ci-ops-files
    file: cf-deployment-concourse-tasks/collect-ops-files/task.yml
    image: image-cf-deployment-concourse-tasks
    input_mapping:
      base-ops-files: cf-deployment-pinned
      new-ops-files: persi-ci
    params:
      BASE_OPS_FILE_DIR: "operations"
  - task: generate-variables
    file: persi-ci/scripts/ci/generate_variables.build.yml
    image: image-cf-deployment-concourse-tasks
    params:
      GENERATE_NFS_VARS: false
      GENERATE_SMB_VARS: true
      SMB_USERNAME: *pats_username
      SMB_PASSWORD: *pats_password
  - task: bosh-deploy-cf
    file: persi-ci/scripts/ci/deploy-cf-with-multiple-releases.build.yml
    image: cryogenics-essentials
    input_mapping:
      cf-deployment: cf-deployment-pinned
      toolsmiths-env: smith-env
      ops-files: collected-ops-files
      vars-files: generated-vars
    params:
      VARS_FILES: "smb-vars.yml"
      OPS_FILES: "operations/use-compiled-releases.yml
                  operations/scale-to-one-az.yml
                  operations/test/enable-smb-test-server.yml
                  operations/backup-and-restore/enable-backup-restore.yml
                  operations/enable-smb-volume-service.yml
                  updated-smb-releases.yml
                  operations/experimental/fast-deploy-with-downtime-and-danger.yml"
  - task: run-smoke-tests
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    image: cryogenics-essentials
    input_mapping:
      toolsmiths-env: smith-env
    params:
      ERRAND_NAME: smoke_tests
  - task: run-smb-broker-errand
    attempts: 3
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    image: cryogenics-essentials
    input_mapping:
      toolsmiths-env: smith-env
    params:
      ERRAND_NAME: smbbrokerpush
      INSTANCE: smb-broker-push

- name: cats
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: smb-volume-release
        passed:
        - pats
        trigger: true
      - get: smith-env
        passed:
        - pats
        trigger: true
      - get: persi-ci
      - get: cf-acceptance-tests
      - get: cf-deployment-concourse-tasks
      - get: image-cf-deployment-concourse-tasks
      - get: cryogenics-essentials
  - task: generate-cats-config
    file: persi-ci/scripts/ci/generate_cats_config.build.yml
    image: cryogenics-essentials
    params:
      VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers.sh
      CF_USERNAME: admin
      SERVICE_NAME: smb
      PLAN_NAME: Existing
      CREATE_CONFIG: *cats_create_config
      TOOLSMITHS_API_TOKEN: *toolsmiths_api_token
  - task: run-cats
    file: cf-deployment-concourse-tasks/run-cats/task.yml
    image: cryogenics-essentials
    input_mapping:
      integration-config: cats-config
    params:
      CONFIG_FILE_PATH: cats.json

- name: drats
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: smb-volume-release
        passed: [cats]
        trigger: true
      - get: bbr-binary-release
      - get: disaster-recovery-acceptance-tests
      - get: persi-ci
      - get: cryogenics-essentials
      - get: smith-env
        passed: [cats]
        trigger: true
  - task: generate-integration-config
    file: persi-ci/scripts/ci/generate-drats-integration-config.build.yml
    image: cryogenics-essentials
    params:
      INTEGRATION_CONFIG_FILE_PATH: config/drats-smb.json
    input_mapping:
      integration-configs: persi-ci

  - task: drats-with-integration-config
    file: disaster-recovery-acceptance-tests/ci/tasks/drats-with-integration-config/task.yml
    image: cryogenics-essentials
    privileged: true
    input_mapping:
      drats-integration-config: updated-integration-configs
    params:
      CONFIG_FILE_PATH: config/drats-smb.json

- name: pats
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: cf-volume-services-acceptance-tests
      - get: persi-ci
      - get: smith-env
        passed: [deploy-cf]
        trigger: true
      - get: smb-volume-release
        passed: [deploy-cf]
      - get: cryogenics-essentials
      - get: smb-volume-release-concourse-tasks
        params:
          submodules: none
  - task: generate-pats-config-smb
    file: persi-ci/scripts/ci/generate_pats_config.build.yml
    image: cryogenics-essentials
    params:
      VAR_RESOLVER_SCRIPT: persi-ci/scripts/ci/cf_deployment_helpers.sh
      TOOLSMITHS_API_TOKEN: *toolsmiths_api_token
      CF_USERNAME: admin
      DISALLOWED_OVERRIDE_BIND_CONFIG: '{\"share\":\"//smbtestserver.service.cf.internal/export/vol2\"}'
      CREATE_BOGUS_CONFIG: '{\"share\":\"//smb.bogus/export/nonexistensevol\"}'
      PLAN_NAME: Existing
      SERVICE_NAME: smb
      CREATE_CONFIG: *pats_create_config
      BIND_CONFIG: *pats_bind_config
    output_mapping:
      pats-config: smb-pats-config
  - task: run-pats-smb
    input_mapping:
      pats-config: smb-pats-config
    file: persi-ci/scripts/ci/run-pats.build.yml
    image: cryogenics-essentials
    attempts: 3
    params:
      PARALLEL_NODES: 5
      TEST_MOUNT_OPTIONS: false
      TEST_MOUNT_FAIL_LOGGING: true
      TEST_MULTI_CELL: true
      TEST_READ_ONLY: true

- name: unclaim-env
  plan:
  - get: smith-env
    passed:
    - drats
    trigger: true
  - put: smith-env
    params:
      action: unclaim
      env_file: smith-env/metadata

- name: merge-pr
  plan:
  - get: smb-volume-release
    trigger: true
    passed:
    - drats
  - put: smb-volume-release
    params:
      merge: true
      repository: smb-volume-release

- name: check-for-changes
  plan:
  - in_parallel:
    - get: every-week
      trigger: true
    - get: smb-volume-release-master
    - get: smb-volume-release-master-production-files-only

- name: shipit-smb
  serial_groups:
  - smb-version
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: cryogenics-concourse-tasks
      - get: cryogenics-essentials
      - get: image-backup-and-restore
      - get: python-394
      - get: smb-volume-release-master-production-files-only
        trigger: true
        passed:
        - check-for-changes
      - get: release
        resource: smb-volume-release-master
        passed:
        - check-for-changes
      - get: version
        resource: smb-volume-version
        params:
          bump: final
  - task: create-final-release
    file: cryogenics-concourse-tasks/bosh-tasks/create-release/task.yml
    image: cryogenics-essentials
    input_mapping:
      release-repo: release
    output_mapping:
      updated-release-repo: smb-final-release
      updated-release-tarball: smb-final-release-tarball
    params:
      AWS_ACCESS_KEY_ID: *upload_role_id
      AWS_SECRET_ACCESS_KEY: *upload_role_secret
      AWS_ROLE_ARN: *upload_role_arn
      GIT_USERNAME: *github_user
      GIT_EMAIL: *github_email
      FINAL: true
      RELEASE_NAME: smb-volume
  - task: create-release-notes
    file: cryogenics-concourse-tasks/release-automation/release-notes/task.yml
    image: python-394
    input_mapping:
      git-repo: release
    params:
      USE_LATEST_PUBLISHED_TAG: true
  - task: format-release-notes
    file: cryogenics-concourse-tasks/release-automation/format-release-notes/task.yml
    image: image-backup-and-restore
    input_mapping:
      template-folder: cryogenics-concourse-tasks
    params:
      TEMPLATE_PATH: release-automation/release-notes-templates/release-notes-auto.md.erb
  - put: smb-volume-version
    resource: smb-volume-version
    params:
      file: version/number
  - put: smb-volume-release-master
    params:
      repository: smb-final-release
      tag: version/number
      tag_prefix: v
  - put: github-release-smb
    params:
      name: version/number
      tag: version/number
      body: release-notes/release-notes.md
      tag_prefix: v
      globs:
      - smb-final-release-tarball/smb-volume-*.tgz
  - in_parallel:
    - load_var: github-release-url
      file: github-release-smb/url
    - load_var: version-number
      file: smb-volume-version/number
  - put: slack-cryo-notification
    params:
      text: |
        *smb-volume*: version `((.:version-number))` has been published 🎉
        Next steps (cc <!subteam^S028XABEHAP>):
          1. Review the release notes and undraft the release <((.:github-release-url))|here>.
  - put: smb-volume-version
    params:
      bump: patch

- name: manual-bump-smb-patch
  serial_groups:
  - smb-version
  plan:
  - get: smb-volume-version
    resource: smb-volume-version
    params:
      bump: final
  - put: smb-volume-version
    params:
      bump: patch

- name: manual-bump-smb-minor
  serial_groups:
  - smb-version
  plan:
  - get: smb-volume-version
    resource: smb-volume-version
    params:
      bump: final
  - put: smb-volume-version
    params:
      bump: minor

- name: manual-bump-smb-major
  serial_groups:
  - smb-version
  plan:
  - get: smb-volume-version
    resource: smb-volume-version
    params:
      bump: final
  - put: smb-volume-version
    params:
      bump: major
