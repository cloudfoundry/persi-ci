---
#  This pipeline is set automatically, any non-committed changes will be lost.
#
# To set the pipeline, run:
#    fly -t cryo-runway set-pipeline -p lts-nfs-volume-release-v5.0 -c lts-nfs-volume-release-v5.0.yml -v lts-nfs-branch=v5.0 -v nfs-semver-initial-version=5.0.3 -v pas-pool-name=tas-2_11
#
# ************************************
# Secrets we need to run this pipeline
# ************************************


aws_uploader_role_arn: &aws_uploader_role_arn ((aws/lts-nfsvolume-uploader.role_arn))
aws_uploader_role_id: &aws_uploader_role_id ((aws/lts-nfsvolume-uploader.role_id))
aws_uploader_role_secret: &aws_uploader_role_secret ((aws/lts-nfsvolume-uploader.role_secret))

github_access_token: &github_access_token ((github.access_token))
github_email: &github_email ((github.email))
github_https_password: &github_https_password ((github.https_password))
github_https_username: &github_https_username ((github.https_username))
github_ssh_key: &github_ssh_key ((github.ssh_key))

slack_webhook: &slack_webhook ((slack.webhook))

shepherd_token: &shepherd-token ((shepherd.sa_key))

# **************
# End of secrets
# **************

groups:
- name: test
  jobs:
  - nfs-security-scan
  - nfsdriver-unit
  - nfsbroker-tests
  - nfs-volume-release-job-tests
  - nfsdriver-integration
  - claim-env
  - deploy-cf
  - pats-nfs-ldap-ephemeral-environment
  - pats-nfs-ldap-legacy-ephemeral-environment
  - unclaim-env
  - merge-pr
- name: bump
  jobs:
  - bump-golang
  - update-go-directive-for-nfsv3driver
  - update-go-directive-for-nfsbroker
- name: release
  jobs:
  - manual-bump-nfs-patch
  - check-for-changes
  - shipit-nfs

resource_types:
- name: semver
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/concourse/semver-resource
    tag: "1.6"
  type: registry-image

- name: slack-notification
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cfcommunity/slack-notification-resource
    tag: latest

- name: git
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/concourse/git-resource
    tag: ubuntu

- name: pcf-pool
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
    tag: v1

- name: pull-request
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cryogenics/pr-queue-resource

resources:
- name: bosh-integration-docker
  icon: docker
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/bosh/integration
    tag: main

- name: cfpersi-nfs-unit-tests-docker
  icon: docker
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cfpersi/nfs-unit-tests
    tag: latest

- name: cfpersi-nfs-integration-tests-docker
  icon: docker
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cfpersi/nfs-integration-tests
    tag: latest

- name: main-bosh-docker
  icon: docker
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/bosh/main-bosh-docker
    tag: latest

- name: cryogenics-essentials-docker
  icon: docker
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cryogenics/essentials
    tag: latest

- name: slack-cryo-notification
  type: slack-notification
  icon: bell-ring
  source:
    url: *slack_webhook

- name: cryogenics-concourse-tasks
  type: git
  icon: github
  source:
    uri: git@github.com:pivotal/cryogenics-concourse-tasks.git
    private_key: *github_ssh_key

- name: every-week
  type: time
  source:
    interval: 168h  # 24h*7days

- name: nfs-volume-release-concourse-tasks
  type: git
  icon: github
  source:
    #  branch: {{lts-nfs-branch}}
    branch: v5.0-ci-fix
    private_key: *github_ssh_key
    uri: https://github.com/cloudfoundry/nfs-volume-release.git

- name: shepherd-env
  type: pcf-pool
  icon: pool
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd-token
    lease:
      namespace: cryogenics
      pool:
        namespace: official
        name: {{pas-pool-name}}
    compatibility_mode: environments-app
    debug: true

- name: docker_driver_integration_tests
  type: git
  icon: github
  source:
    branch: main
    uri: https://github.com/cloudfoundry/docker_driver_integration_tests

- name: credhub
  type: git
  icon: github
  # PINNED
  # https://github.com/cloudfoundry/credhub/commit/4dab29337629ebe9df6f7b9cdd921038f652867e - sets the
  #   minimum required Java version to 11, while bosh integration docker image has Java 8 installed.
  #   For LTS testing purposes, pinning the CredHub version should be sufficient.
  # See https://www.pivotaltracker.com/story/show/186290510 for updates.
  version:
    ref: f636d571375f8dc5a61848eda9cbc9ac50bc5bff
  source:
    branch: main
    uri: https://github.com/cloudfoundry-incubator/credhub

- name: persi-ci
  type: git
  icon: github
  source:
    uri: https://github.com/cloudfoundry/persi-ci
    branch: master

- name: nfs-volume-release
  type: pull-request
  icon: source-pull
  source:
    base_branch: {{lts-nfs-branch}}
    access_token: *github_access_token
    repository: cloudfoundry/nfs-volume-release
    disable_forks: true
    autosync_pr: false

- name: nfs-volume-release-lts
  type: git
  icon: github
  source:
    submodule_credentials:
    - host: github.com
      username: *github_https_username
      password: *github_https_password
    branch: {{lts-nfs-branch}}
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git

- name: nfs-volume-release-lts-production-files-only
  type: git
  icon: github
  source:
    submodule_credentials:
    - host: github.com
      username: *github_https_username
      password: *github_https_password
    branch: {{lts-nfs-branch}}
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git
    paths:
    - .final_builds
    - LICENSE
    - NOTICE
    - config
    - jobs
    - packages
    - releases
    - src

- name: nfsvolume-version
  type: semver
  icon: counter
  source:
    access_key_id: *aws_uploader_role_id
    secret_access_key: *aws_uploader_role_secret
    assume_role_arn: *aws_uploader_role_arn
    bucket: lts-nfsvolume-release-versions
    initial_version: {{nfs-semver-initial-version}}
    key: {{lts-nfs-branch}}
    region_name: us-west-2

- name: cf-deployment
  type: git
  icon: github
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment.git

- name: cf-deployment-concourse-tasks
  type: git
  icon: github
  source:
    branch: main
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: cf-volume-services-acceptance-tests
  type: git
  icon: github
  source:
    uri: https://github.com/cloudfoundry/cf-volume-services-acceptance-tests.git

- name: github-release-nfs
  type: github-release
  icon: package-variant-closed-check
  source:
    user: cloudfoundry
    repository: nfs-volume-release
    drafts: true
    access_token: *github_access_token

- name: golang-release
  type: git
  icon: tag
  source:
    uri: https://github.com/bosh-packages/golang-release.git
    tag_filter: v*

- name: nfs-volume-release-bump-golang
  type: git
  icon: github
  source:
    branch: {{lts-nfs-branch}}
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git

- name: nfs-volume-release-bump-golang-branch
  type: git
  icon: github
  source:
    branch: {{lts-nfs-branch}}
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/nfs-volume-release.git
    disable_ci_skip: true

- name: nfsv3driver-v5
  type: git
  icon: github
  source:
    branch: {{lts-nfs-branch}}
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/nfsv3driver.git
    disable_ci_skip: true

- name: nfsbroker-v5
  type: git
  icon: github
  source:
    branch: {{lts-nfs-branch}}
    private_key: *github_ssh_key
    uri: git@github.com:cloudfoundry/nfsbroker.git
    disable_ci_skip: true

jobs:
- name: bump-golang
  plan:
  - in_parallel:
    - get: cryogenics-essentials-docker
    - get: golang-release
      trigger: true
    - get: cryogenics-concourse-tasks
    - get: nfs-volume-release-bump-golang-branch
      params:
        branch: {{lts-nfs-branch}}
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - task: bump-golang
    image: cryogenics-essentials-docker
    file: cryogenics-concourse-tasks/deps-automation/bump-golang/task.yml
    input_mapping:
      release: nfs-volume-release-bump-golang-branch
      vendored-package-release: golang-release
    params:
      VENDORED_PACKAGE_NAME: golang-1-linux
      VENDOR_UPDATES_BRANCH: &golang-vendor-branch bump-golang-vendor-((.:golang-release-version))-into-v5
      COMMIT_USERNAME: bump-golang CI job
      COMMIT_USEREMAIL: mapbu-cryogenics@groups.vmware.com
      AWS_ACCESS_KEY_ID: *aws_uploader_role_id
      AWS_SECRET_ACCESS_KEY: *aws_uploader_role_secret
      AWS_ASSUME_ROLE_ARN: *aws_uploader_role_arn
  - put: nfs-volume-release-bump-golang
    params:
      repository: release-with-updated-vendored-package
      branch: *golang-vendor-branch
  - try:
      # We've seen cases where there are 2 or more new releases of
      # golang-release which causes this job to trigger 2x or more. A PR will
      # be created on the 1st build. On the following ones, it is possible
      # that this task will fail as there exist already a PR (which is
      # probably flowing through the pipeline). To prevent this scenario
      # we're making this step best-effort.
      # This also makes the job idempotent. If we retrigger the job but if
      # there are no new version of golang-release, this step will fail
      # saying "Your branch is up-to-date with
      # 'origin/golang-vendor-update'."
      task: create-golang-vendor-pull-request
      image: cryogenics-essentials-docker
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      params: &golang-bump-pr-params
        BASE: {{lts-nfs-branch}}
        BRANCH: *golang-vendor-branch
        LABELS: dependencies, v5
        TITLE: Update vendored package golang-1-linux
        MESSAGE: "This is an automatically generated Pull Request from the Cryogenics CI Bot.\
          \nI have detected a new version of [golang-release](https://github.com/bosh-packages/golang-release) and \
          automatically bumped\nthis package to benefit from the latest changes.\
          \nIf this does not look right, please reach out to the \
          [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU) team.\n"
      input_mapping:
        source-repo: nfs-volume-release-bump-golang

- name: update-go-directive-for-nfsv3driver
  plan:
  - in_parallel:
    - get: cryogenics-essentials-docker
    - get: golang-release
      trigger: true
      passed:
      - bump-golang
    - get: cryogenics-concourse-tasks
      passed:
      - bump-golang
    - get: nfsv3driver-v5
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - task: update-go-directive
    image: cryogenics-essentials-docker
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: nfsv3driver-v5
    output_mapping:
      golang-project-repo: nfsv3driver-v5
  - put: nfsv3driver-v5
    params:
      repository: nfsv3driver-v5
      branch: *golang-vendor-branch
  - try:
      # We've seen cases where there are 2 or more new releases of
      # golang-release which causes this job to trigger 2x or more. A PR will
      # be created on the 1st build. On the following ones, it is possible
      # that this task will fail as there exist already a PR (which is
      # probably flowing through the pipeline). To prevent this scenario
      # we're making this step best-effort.
      # This also makes the job idempotent. If we retrigger the job but if
      # there are no new version of golang-release, this step will fail
      # saying "Your branch is up-to-date with
      # 'origin/golang-vendor-update'."
      task: create-gomod-directive-update-pull-request
      image: cryogenics-essentials-docker
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      params:
        <<: *golang-bump-pr-params
      input_mapping:
        source-repo: nfsv3driver-v5

- name: update-go-directive-for-nfsbroker
  plan:
  - in_parallel:
    - get: cryogenics-essentials-docker
    - get: golang-release
      trigger: true
      passed:
      - bump-golang
    - get: cryogenics-concourse-tasks
      passed:
      - bump-golang
    - get: nfsbroker-v5
  - load_var: golang-release-version
    file: golang-release/.git/describe_ref
  - task: update-go-directive
    image: cryogenics-essentials-docker
    file: cryogenics-concourse-tasks/tasks/bosh/update-go-directive/task.yml
    input_mapping:
      bosh-release-repo-with-vendored-golang: golang-release
      golang-project-repo: nfsbroker-v5
    output_mapping:
      golang-project-repo: nfsbroker-v5
  - put: nfsbroker-v5
    params:
      repository: nfsbroker-v5
      branch: *golang-vendor-branch
  - try:
      # We've seen cases where there are 2 or more new releases of
      # golang-release which causes this job to trigger 2x or more. A PR will
      # be created on the 1st build. On the following ones, it is possible
      # that this task will fail as there exist already a PR (which is
      # probably flowing through the pipeline). To prevent this scenario
      # we're making this step best-effort.
      # This also makes the job idempotent. If we retrigger the job but if
      # there are no new version of golang-release, this step will fail
      # saying "Your branch is up-to-date with
      # 'origin/golang-vendor-update'."
      task: create-gomod-directive-update-pull-request
      image: cryogenics-essentials-docker
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      params:
        <<: *golang-bump-pr-params
      input_mapping:
        source-repo: nfsbroker-v5

- name: nfs-security-scan
  plan:
  - in_parallel:
    - get: persi-ci
    - get: cfpersi-nfs-unit-tests-docker
    - get: nfs-volume-release
      trigger: true
  - task: build
    image: cfpersi-nfs-unit-tests-docker
    file: persi-ci/scripts/ci/security-scan.build.yml
    params:
      PATHS: "src/code.cloudfoundry.org/nfsv3driver/:src/code.cloudfoundry.org/nfsbroker/"
      RELEASE_DIR: nfs-volume-release
    input_mapping:
      release-dir: nfs-volume-release

- name: nfsdriver-unit
  public: true
  plan:
  - in_parallel:
    - get: cfpersi-nfs-unit-tests-docker
    - get: nfs-volume-release-concourse-tasks
      params:
        submodules: none
    - get: nfs-volume-release
      trigger: true
  - task: build
    image: cfpersi-nfs-unit-tests-docker
    file: nfs-volume-release-concourse-tasks/scripts/ci/run_driver_unit.build.yml

- name: nfsbroker-tests
  public: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: bosh-integration-docker
      - get: nfs-volume-release-concourse-tasks
        params:
          submodules: none
      - get: nfs-volume-release
        trigger: true
      - get: credhub
  - task: run-test
    image: bosh-integration-docker
    file: nfs-volume-release-concourse-tasks/scripts/ci/run_broker_integration.build.yml

- name: nfs-volume-release-job-tests
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: cryogenics-essentials-docker
      - get: main-bosh-docker
      - get: persi-ci
      - get: nfs-volume-release-concourse-tasks
      - get: nfs-volume-release
        trigger: true
  - task: rspec
    image: cryogenics-essentials-docker
    file: persi-ci/scripts/ci/run-rspec.build.yml
    input_mapping:
      test-repo: nfs-volume-release
  - task: bosh-release-test
    image: main-bosh-docker
    attempts: 3
    file: nfs-volume-release-concourse-tasks/scripts/ci/run_bosh_release_tests.build.yml
    privileged: true
    params:
      DOCKER_IMAGE: harbor-repo.vmware.com/dockerhub-proxy-cache/cryogenics/essentials

- name: nfsdriver-integration
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: cfpersi-nfs-integration-tests-docker
      - get: persi-ci
      - get: docker_driver_integration_tests
      - get: nfs-volume-release-concourse-tasks
        params:
          submodules: none
      - get: nfs-volume-release
        passed:
        - nfsdriver-unit
        - nfsbroker-tests
        - nfs-security-scan
        trigger: true
  - in_parallel:
      fail_fast: true
      steps:
      - task: run_docker_driver_integration_tests
        image: cfpersi-nfs-integration-tests-docker
        file: nfs-volume-release-concourse-tasks/scripts/ci/run_docker_driver_integration_tests.build.yml
        privileged: true
        params:
          TEST_PACKAGE: docker_driver_integration_tests/
      - task: run_docker_driver_lazy_unmount_integration_tests
        image: cfpersi-nfs-integration-tests-docker
        file: nfs-volume-release-concourse-tasks/scripts/ci/run_docker_driver_integration_tests.build.yml
        privileged: true
        params:
          TEST_PACKAGE: docker_driver_integration_tests/lazy_unmount
      - task: run_driver_broker_compatibility_tests
        image: cfpersi-nfs-integration-tests-docker
        privileged: true
        input_mapping:
          director-state: bbl-state
        params:
          TEST_PACKAGE: docker_driver_integration_tests/compatibility
        file: nfs-volume-release-concourse-tasks/scripts/ci/run_docker_driver_integration_tests.build.yml

- name: claim-env
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: cryogenics-essentials-docker
      - get: nfs-volume-release
        trigger: true
        passed:
        - nfsdriver-integration
        - nfs-volume-release-job-tests
  - put: shepherd-env
    params:
      action: create
      duration: 6h
      resource: shepherd-env
    timeout: 6h
  - put: shepherd-env
    params:
      action: extend
      expire-in: 6h
      resource: shepherd-env
  - task: output-env-details
    image: cryogenics-essentials-docker
    file: persi-ci/scripts/ci/claim-pooled-env.build.yml
    input_mapping:
      pooled-env: shepherd-env

- name: deploy-cf
  public: true
  build_logs_to_retain: 100
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: cryogenics-essentials-docker
      - get: shepherd-env
        passed: [ claim-env ]
        trigger: true
      - get: cf-deployment-concourse-tasks
      - get: cf-deployment
      - get: persi-ci
      - get: nfs-volume-release
        passed: [ claim-env ]
  - task: bosh-deploy
    image: cryogenics-essentials-docker
    config:
      platform: linux
      inputs:
      - name: nfs-volume-release
      - name: persi-ci
      - name: shepherd-env
      run:
        path: bash
        args:
        - -exc
        - |
          eval "$(smith bosh -l shepherd-env/metadata)"
          export BOSH_DEPLOYMENT=$(smith bosh -l shepherd-env/metadata deployments -- --column=Name --json | jq -r ."Tables[0].Rows[0].name")
          pushd nfs-volume-release
            bosh create-release
            bosh upload-release
            bosh manifest > /tmp/cf.yml
          popd
          bosh deploy -n /tmp/cf.yml \
              -o persi-ci/operations/pas/use-latest-releases.yml \
              -o persi-ci/operations/pas/nfs-ldap-pas-mixin.yml \
              -o persi-ci/operations/pas/remove-paths-from-releases.yml
          bosh run-errand nfsbrokerpush

- name: pats-nfs-ldap-ephemeral-environment
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: cryogenics-essentials-docker
      - get: cf-volume-services-acceptance-tests
      - get: persi-ci
      - get: shepherd-env
        passed: [ deploy-cf ]
        trigger: true
      - get: nfs-volume-release
        passed: [ deploy-cf ]
  - task: generate-pats-config-nfs
    image: cryogenics-essentials-docker
    file: persi-ci/scripts/ci/generate_pats_config_pas_shp.build.yml
    params:
      CF_USERNAME: admin
      BIND_CONFIG: '["{\"username\":\"user1000\",\"password\":\"secret\"}"]'
      CREATE_CONFIG: '{\"share\":\"mysql.service.cf.internal/export/users\"}'
      DISALLOWED_LDAP_BIND_CONFIG: '{\"uid\":\"1000\",\"gid\":\"1000\"}'
      PLAN_NAME: Existing
      SERVICE_NAME: nfs
    input_mapping:
      smith-env: shepherd-env
    output_mapping:
      pats-config: nfs-pats-config
  - in_parallel:
      fail_fast: true
      steps:
      - task: run-pats-nfs-ephemeral
        image: cryogenics-essentials-docker
        input_mapping:
          pats-config: nfs-pats-config
        file: persi-ci/scripts/ci/run-pats.build.yml
        attempts: 3
        params:
          TEST_DOCKER_PORA: true

- name: pats-nfs-ldap-legacy-ephemeral-environment
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: cryogenics-essentials-docker
      - get: cf-volume-services-acceptance-tests
      - get: persi-ci
      - get: shepherd-env
        passed: [ deploy-cf ]
        trigger: true
      - get: nfs-volume-release
        passed: [ deploy-cf ]
  - task: generate-pats-config-nfs
    image: cryogenics-essentials-docker
    file: persi-ci/scripts/ci/generate_pats_config_pas_shp.build.yml
    params:
      CF_USERNAME: admin
      BIND_CONFIG: '["{\"username\":\"user1000\",\"password\":\"secret\"}"]'
      CREATE_CONFIG: '{\"share\":\"mysql.service.cf.internal/export/users\"}'
      DISALLOWED_LDAP_BIND_CONFIG: '{\"uid\":\"1000\",\"gid\":\"1000\"}'
      PLAN_NAME: Existing
      SERVICE_NAME: nfs-legacy
    input_mapping:
      smith-env: shepherd-env
    output_mapping:
      pats-config: nfs-pats-config
  - in_parallel:
      fail_fast: true
      steps:
      - task: run-pats-nfs-ephemeral
        image: cryogenics-essentials-docker
        input_mapping:
          pats-config: nfs-pats-config
        file: persi-ci/scripts/ci/run-pats.build.yml
        attempts: 3
        params:
          TEST_DOCKER_PORA: true

- name: unclaim-env
  plan:
  - get: shepherd-env
    passed:
    - pats-nfs-ldap-legacy-ephemeral-environment
    - pats-nfs-ldap-ephemeral-environment
    trigger: true
  - put: shepherd-env
    params:
      action: release
      resource: shepherd-env

- name: manual-bump-nfs-patch
  serial_groups:
  - nfs-version
  plan:
  - get: nfs-volume-version
    resource: nfsvolume-version
    params:
      bump: final
  - put: nfsvolume-version
    params:
      bump: patch

- name: merge-pr
  plan:
  - get: nfs-volume-release
    trigger: true
    passed:
    - pats-nfs-ldap-legacy-ephemeral-environment
    - pats-nfs-ldap-ephemeral-environment
  - put: nfs-volume-release
    params:
      merge: true
      repository: nfs-volume-release

- name: check-for-changes
  plan:
  - in_parallel:
    - get: every-week
      trigger: true
    - get: nfs-volume-release-lts
    - get: nfs-volume-release-lts-production-files-only


- name: shipit-nfs
  serial_groups:
  - nfs-version
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: persi-ci
      - get: cryogenics-essentials-docker
      - get: cryogenics-concourse-tasks
      - get: nfs-volume-release-lts-production-files-only
        trigger: true
        passed:
        - check-for-changes
      - get: release
        resource: nfs-volume-release-lts
        passed:
        - check-for-changes
      - get: version
        resource: nfsvolume-version
        params:
          bump: final
  - task: create-final-release
    image: cryogenics-essentials-docker
    file: cryogenics-concourse-tasks/bosh-tasks/create-release/task.yml
    input_mapping:
      release-repo: release
    output_mapping:
      updated-release-repo: nfs-final-release
      updated-release-tarball: nfs-final-release-tarball
    params:
      AWS_ACCESS_KEY_ID: *aws_uploader_role_id
      AWS_SECRET_ACCESS_KEY: *aws_uploader_role_secret
      AWS_ROLE_ARN: *aws_uploader_role_arn
      GIT_USERNAME: *github_https_username
      GIT_EMAIL: *github_email
      FINAL: true
      RELEASE_NAME: nfs-volume
  - task: create-release-notes
    image: cryogenics-essentials-docker
    file: cryogenics-concourse-tasks/release-automation/release-notes/task.yml
    input_mapping:
      git-repo: release
    params:
      USE_LATEST_PUBLISHED_TAG: true
  - task: format-release-notes
    image: cryogenics-essentials-docker
    file: cryogenics-concourse-tasks/release-automation/format-release-notes/task.yml
    input_mapping:
      template-folder: cryogenics-concourse-tasks
    params:
      TEMPLATE_PATH: release-automation/release-notes-templates/release-notes-auto.md.erb
  - put: nfs-volume-version
    resource: nfsvolume-version
    params:
      file: version/number
  - put: nfs-volume-release-lts
    params:
      repository: nfs-final-release
      tag: version/number
      tag_prefix: v
  - put: github-release-nfs
    params:
      name: version/number
      tag: version/number
      body: release-notes/release-notes.md
      tag_prefix: v
      globs:
      - nfs-final-release-tarball/nfs-volume-*.tgz
  - in_parallel:
    - load_var: github-release-url
      file: github-release-nfs/url
    - load_var: version-number
      file: version/number
  - put: slack-cryo-notification
    params:
      text: |
        *nfs-volume*: version `((.:version-number))` has been published 🎉
        Next steps (cc <!subteam^S028XABEHAP>):
          1. Review the release notes and undraft the release <((.:github-release-url))|here>.
  - put: nfsvolume-version
    params:
      bump: patch
